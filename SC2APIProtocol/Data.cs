// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol {

  /// <summary>Holder for reflection information generated from s2clientprotocol/data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for s2clientprotocol/data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtzMmNsaWVudHByb3RvY29sL2RhdGEucHJvdG8SDlNDMkFQSVByb3RvY29s",
            "Gh1zMmNsaWVudHByb3RvY29sL2NvbW1vbi5wcm90byLWAwoLQWJpbGl0eURh",
            "dGESEgoKYWJpbGl0eV9pZBgBIAEoDRIRCglsaW5rX25hbWUYAiABKAkSEgoK",
            "bGlua19pbmRleBgDIAEoDRITCgtidXR0b25fbmFtZRgEIAEoCRIVCg1mcmll",
            "bmRseV9uYW1lGAUgASgJEg4KBmhvdGtleRgGIAEoCRIcChRyZW1hcHNfdG9f",
            "YWJpbGl0eV9pZBgHIAEoDRIRCglhdmFpbGFibGUYCCABKAgSMgoGdGFyZ2V0",
            "GAkgASgOMiIuU0MyQVBJUHJvdG9jb2wuQWJpbGl0eURhdGEuVGFyZ2V0EhUK",
            "DWFsbG93X21pbmltYXAYCiABKAgSFgoOYWxsb3dfYXV0b2Nhc3QYCyABKAgS",
            "EwoLaXNfYnVpbGRpbmcYDCABKAgSGAoQZm9vdHByaW50X3JhZGl1cxgNIAEo",
            "AhIcChRpc19pbnN0YW50X3BsYWNlbWVudBgOIAEoCBISCgpjYXN0X3Jhbmdl",
            "GA8gASgCIlsKBlRhcmdldBIQCgxUYXJnZXRfVU5TRVQQABIICgROb25lEAES",
            "CQoFUG9pbnQQAhIICgRVbml0EAMSDwoLUG9pbnRPclVuaXQQBBIPCgtQb2lu",
            "dE9yTm9uZRAFIkoKC0RhbWFnZUJvbnVzEiwKCWF0dHJpYnV0ZRgBIAEoDjIZ",
            "LlNDMkFQSVByb3RvY29sLkF0dHJpYnV0ZRINCgVib251cxgCIAEoAiLtAQoG",
            "V2VhcG9uEi8KBHR5cGUYASABKA4yIS5TQzJBUElQcm90b2NvbC5XZWFwb24u",
            "VGFyZ2V0VHlwZRIOCgZkYW1hZ2UYAiABKAISMQoMZGFtYWdlX2JvbnVzGAMg",
            "AygLMhsuU0MyQVBJUHJvdG9jb2wuRGFtYWdlQm9udXMSDwoHYXR0YWNrcxgE",
            "IAEoDRINCgVyYW5nZRgFIAEoAhINCgVzcGVlZBgGIAEoAiJACgpUYXJnZXRU",
            "eXBlEhQKEFRhcmdldFR5cGVfVU5TRVQQABIKCgZHcm91bmQQARIHCgNBaXIQ",
            "AhIHCgNBbnkQAyKVBAoMVW5pdFR5cGVEYXRhEg8KB3VuaXRfaWQYASABKA0S",
            "DAoEbmFtZRgCIAEoCRIRCglhdmFpbGFibGUYAyABKAgSEgoKY2FyZ29fc2l6",
            "ZRgEIAEoDRIUCgxtaW5lcmFsX2Nvc3QYDCABKA0SFAoMdmVzcGVuZV9jb3N0",
            "GA0gASgNEhUKDWZvb2RfcmVxdWlyZWQYDiABKAISFQoNZm9vZF9wcm92aWRl",
            "ZBgSIAEoAhISCgphYmlsaXR5X2lkGA8gASgNEiIKBHJhY2UYECABKA4yFC5T",
            "QzJBUElQcm90b2NvbC5SYWNlEhIKCmJ1aWxkX3RpbWUYESABKAISEwoLaGFz",
            "X3Zlc3BlbmUYEyABKAgSFAoMaGFzX21pbmVyYWxzGBQgASgIEhMKC3NpZ2h0",
            "X3JhbmdlGBkgASgCEhIKCnRlY2hfYWxpYXMYFSADKA0SEgoKdW5pdF9hbGlh",
            "cxgWIAEoDRIYChB0ZWNoX3JlcXVpcmVtZW50GBcgASgNEhgKEHJlcXVpcmVf",
            "YXR0YWNoZWQYGCABKAgSLQoKYXR0cmlidXRlcxgIIAMoDjIZLlNDMkFQSVBy",
            "b3RvY29sLkF0dHJpYnV0ZRIWCg5tb3ZlbWVudF9zcGVlZBgJIAEoAhINCgVh",
            "cm1vchgKIAEoAhInCgd3ZWFwb25zGAsgAygLMhYuU0MyQVBJUHJvdG9jb2wu",
            "V2VhcG9uIoYBCgtVcGdyYWRlRGF0YRISCgp1cGdyYWRlX2lkGAEgASgNEgwK",
            "BG5hbWUYAiABKAkSFAoMbWluZXJhbF9jb3N0GAMgASgNEhQKDHZlc3BlbmVf",
            "Y29zdBgEIAEoDRIVCg1yZXNlYXJjaF90aW1lGAUgASgCEhIKCmFiaWxpdHlf",
            "aWQYBiABKA0iKQoIQnVmZkRhdGESDwoHYnVmZl9pZBgBIAEoDRIMCgRuYW1l",
            "GAIgASgJIlQKCkVmZmVjdERhdGESEQoJZWZmZWN0X2lkGAEgASgNEgwKBG5h",
            "bWUYAiABKAkSFQoNZnJpZW5kbHlfbmFtZRgDIAEoCRIOCgZyYWRpdXMYBCAB",
            "KAIqswEKCUF0dHJpYnV0ZRITCg9BdHRyaWJ1dGVfVU5TRVQQABIJCgVMaWdo",
            "dBABEgsKB0FybW9yZWQQAhIOCgpCaW9sb2dpY2FsEAMSDgoKTWVjaGFuaWNh",
            "bBAEEgsKB1JvYm90aWMQBRILCgdQc2lvbmljEAYSCwoHTWFzc2l2ZRAHEg0K",
            "CVN0cnVjdHVyZRAIEgkKBUhvdmVyEAkSCgoGSGVyb2ljEAoSDAoIU3VtbW9u",
            "ZWQQC2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SC2APIProtocol.Attribute), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.AbilityData), global::SC2APIProtocol.AbilityData.Parser, new[]{ "AbilityId", "LinkName", "LinkIndex", "ButtonName", "FriendlyName", "Hotkey", "RemapsToAbilityId", "Available", "Target", "AllowMinimap", "AllowAutocast", "IsBuilding", "FootprintRadius", "IsInstantPlacement", "CastRange" }, null, new[]{ typeof(global::SC2APIProtocol.AbilityData.Types.Target) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.DamageBonus), global::SC2APIProtocol.DamageBonus.Parser, new[]{ "Attribute", "Bonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Weapon), global::SC2APIProtocol.Weapon.Parser, new[]{ "Type", "Damage", "DamageBonus", "Attacks", "Range", "Speed" }, null, new[]{ typeof(global::SC2APIProtocol.Weapon.Types.TargetType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.UnitTypeData), global::SC2APIProtocol.UnitTypeData.Parser, new[]{ "UnitId", "Name", "Available", "CargoSize", "MineralCost", "VespeneCost", "FoodRequired", "FoodProvided", "AbilityId", "Race", "BuildTime", "HasVespene", "HasMinerals", "SightRange", "TechAlias", "UnitAlias", "TechRequirement", "RequireAttached", "Attributes", "MovementSpeed", "Armor", "Weapons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.UpgradeData), global::SC2APIProtocol.UpgradeData.Parser, new[]{ "UpgradeId", "Name", "MineralCost", "VespeneCost", "ResearchTime", "AbilityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.BuffData), global::SC2APIProtocol.BuffData.Parser, new[]{ "BuffId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.EffectData), global::SC2APIProtocol.EffectData.Parser, new[]{ "EffectId", "Name", "FriendlyName", "Radius" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Attribute {
    [pbr::OriginalName("Attribute_UNSET")] Unset = 0,
    [pbr::OriginalName("Light")] Light = 1,
    [pbr::OriginalName("Armored")] Armored = 2,
    [pbr::OriginalName("Biological")] Biological = 3,
    [pbr::OriginalName("Mechanical")] Mechanical = 4,
    [pbr::OriginalName("Robotic")] Robotic = 5,
    [pbr::OriginalName("Psionic")] Psionic = 6,
    [pbr::OriginalName("Massive")] Massive = 7,
    [pbr::OriginalName("Structure")] Structure = 8,
    [pbr::OriginalName("Hover")] Hover = 9,
    [pbr::OriginalName("Heroic")] Heroic = 10,
    [pbr::OriginalName("Summoned")] Summoned = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  /// May not relevant: queueable (everything is queueable).
  /// May not be important: AbilSetId - marine stim, marauder stim.
  /// Stuff omitted: transient.
  /// Stuff that may be important: cost, range, Alignment, targetfilters.
  /// </summary>
  public sealed partial class AbilityData : pb::IMessage<AbilityData> {
    private static readonly pb::MessageParser<AbilityData> _parser = new pb::MessageParser<AbilityData>(() => new AbilityData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbilityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityData(AbilityData other) : this() {
      abilityId_ = other.abilityId_;
      linkName_ = other.linkName_;
      linkIndex_ = other.linkIndex_;
      buttonName_ = other.buttonName_;
      friendlyName_ = other.friendlyName_;
      hotkey_ = other.hotkey_;
      remapsToAbilityId_ = other.remapsToAbilityId_;
      available_ = other.available_;
      target_ = other.target_;
      allowMinimap_ = other.allowMinimap_;
      allowAutocast_ = other.allowAutocast_;
      isBuilding_ = other.isBuilding_;
      footprintRadius_ = other.footprintRadius_;
      isInstantPlacement_ = other.isInstantPlacement_;
      castRange_ = other.castRange_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbilityData Clone() {
      return new AbilityData(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private uint abilityId_;
    /// <summary>
    /// Stable ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "link_name" field.</summary>
    public const int LinkNameFieldNumber = 2;
    private string linkName_ = "";
    /// <summary>
    /// Catalog name of the ability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LinkName {
      get { return linkName_; }
      set {
        linkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link_index" field.</summary>
    public const int LinkIndexFieldNumber = 3;
    private uint linkIndex_;
    /// <summary>
    /// Catalog index of the ability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LinkIndex {
      get { return linkIndex_; }
      set {
        linkIndex_ = value;
      }
    }

    /// <summary>Field number for the "button_name" field.</summary>
    public const int ButtonNameFieldNumber = 4;
    private string buttonName_ = "";
    /// <summary>
    /// Name used for the command card. May not always be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ButtonName {
      get { return buttonName_; }
      set {
        buttonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendly_name" field.</summary>
    public const int FriendlyNameFieldNumber = 5;
    private string friendlyName_ = "";
    /// <summary>
    /// A human friendly name when the button name or link name isn't descriptive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendlyName {
      get { return friendlyName_; }
      set {
        friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hotkey" field.</summary>
    public const int HotkeyFieldNumber = 6;
    private string hotkey_ = "";
    /// <summary>
    /// Hotkey. May not always be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hotkey {
      get { return hotkey_; }
      set {
        hotkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remaps_to_ability_id" field.</summary>
    public const int RemapsToAbilityIdFieldNumber = 7;
    private uint remapsToAbilityId_;
    /// <summary>
    /// This ability id may be represented by the given more generic id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemapsToAbilityId {
      get { return remapsToAbilityId_; }
      set {
        remapsToAbilityId_ = value;
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 8;
    private bool available_;
    /// <summary>
    /// If true, the ability may be used by this set of mods/map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 9;
    private global::SC2APIProtocol.AbilityData.Types.Target target_ = 0;
    /// <summary>
    /// Determines if a point is or required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.AbilityData.Types.Target Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "allow_minimap" field.</summary>
    public const int AllowMinimapFieldNumber = 10;
    private bool allowMinimap_;
    /// <summary>
    /// Can be cast in the minimap.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowMinimap {
      get { return allowMinimap_; }
      set {
        allowMinimap_ = value;
      }
    }

    /// <summary>Field number for the "allow_autocast" field.</summary>
    public const int AllowAutocastFieldNumber = 11;
    private bool allowAutocast_;
    /// <summary>
    /// Autocast can be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowAutocast {
      get { return allowAutocast_; }
      set {
        allowAutocast_ = value;
      }
    }

    /// <summary>Field number for the "is_building" field.</summary>
    public const int IsBuildingFieldNumber = 12;
    private bool isBuilding_;
    /// <summary>
    /// Requires placement to construct a building.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuilding {
      get { return isBuilding_; }
      set {
        isBuilding_ = value;
      }
    }

    /// <summary>Field number for the "footprint_radius" field.</summary>
    public const int FootprintRadiusFieldNumber = 13;
    private float footprintRadius_;
    /// <summary>
    /// Estimation of the footprint size. Need a better footprint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootprintRadius {
      get { return footprintRadius_; }
      set {
        footprintRadius_ = value;
      }
    }

    /// <summary>Field number for the "is_instant_placement" field.</summary>
    public const int IsInstantPlacementFieldNumber = 14;
    private bool isInstantPlacement_;
    /// <summary>
    /// Placement next to an existing structure, e.g., an add-on like a Tech Lab.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInstantPlacement {
      get { return isInstantPlacement_; }
      set {
        isInstantPlacement_ = value;
      }
    }

    /// <summary>Field number for the "cast_range" field.</summary>
    public const int CastRangeFieldNumber = 15;
    private float castRange_;
    /// <summary>
    /// Range unit can cast ability without needing to approach target.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CastRange {
      get { return castRange_; }
      set {
        castRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbilityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbilityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (LinkName != other.LinkName) return false;
      if (LinkIndex != other.LinkIndex) return false;
      if (ButtonName != other.ButtonName) return false;
      if (FriendlyName != other.FriendlyName) return false;
      if (Hotkey != other.Hotkey) return false;
      if (RemapsToAbilityId != other.RemapsToAbilityId) return false;
      if (Available != other.Available) return false;
      if (Target != other.Target) return false;
      if (AllowMinimap != other.AllowMinimap) return false;
      if (AllowAutocast != other.AllowAutocast) return false;
      if (IsBuilding != other.IsBuilding) return false;
      if (FootprintRadius != other.FootprintRadius) return false;
      if (IsInstantPlacement != other.IsInstantPlacement) return false;
      if (CastRange != other.CastRange) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (LinkName.Length != 0) hash ^= LinkName.GetHashCode();
      if (LinkIndex != 0) hash ^= LinkIndex.GetHashCode();
      if (ButtonName.Length != 0) hash ^= ButtonName.GetHashCode();
      if (FriendlyName.Length != 0) hash ^= FriendlyName.GetHashCode();
      if (Hotkey.Length != 0) hash ^= Hotkey.GetHashCode();
      if (RemapsToAbilityId != 0) hash ^= RemapsToAbilityId.GetHashCode();
      if (Available != false) hash ^= Available.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (AllowMinimap != false) hash ^= AllowMinimap.GetHashCode();
      if (AllowAutocast != false) hash ^= AllowAutocast.GetHashCode();
      if (IsBuilding != false) hash ^= IsBuilding.GetHashCode();
      if (FootprintRadius != 0F) hash ^= FootprintRadius.GetHashCode();
      if (IsInstantPlacement != false) hash ^= IsInstantPlacement.GetHashCode();
      if (CastRange != 0F) hash ^= CastRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AbilityId);
      }
      if (LinkName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LinkName);
      }
      if (LinkIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LinkIndex);
      }
      if (ButtonName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ButtonName);
      }
      if (FriendlyName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FriendlyName);
      }
      if (Hotkey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Hotkey);
      }
      if (RemapsToAbilityId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RemapsToAbilityId);
      }
      if (Available != false) {
        output.WriteRawTag(64);
        output.WriteBool(Available);
      }
      if (Target != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Target);
      }
      if (AllowMinimap != false) {
        output.WriteRawTag(80);
        output.WriteBool(AllowMinimap);
      }
      if (AllowAutocast != false) {
        output.WriteRawTag(88);
        output.WriteBool(AllowAutocast);
      }
      if (IsBuilding != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsBuilding);
      }
      if (FootprintRadius != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FootprintRadius);
      }
      if (IsInstantPlacement != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsInstantPlacement);
      }
      if (CastRange != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(CastRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
      }
      if (LinkName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkName);
      }
      if (LinkIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkIndex);
      }
      if (ButtonName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ButtonName);
      }
      if (FriendlyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
      }
      if (Hotkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hotkey);
      }
      if (RemapsToAbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemapsToAbilityId);
      }
      if (Available != false) {
        size += 1 + 1;
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Target);
      }
      if (AllowMinimap != false) {
        size += 1 + 1;
      }
      if (AllowAutocast != false) {
        size += 1 + 1;
      }
      if (IsBuilding != false) {
        size += 1 + 1;
      }
      if (FootprintRadius != 0F) {
        size += 1 + 4;
      }
      if (IsInstantPlacement != false) {
        size += 1 + 1;
      }
      if (CastRange != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbilityData other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.LinkName.Length != 0) {
        LinkName = other.LinkName;
      }
      if (other.LinkIndex != 0) {
        LinkIndex = other.LinkIndex;
      }
      if (other.ButtonName.Length != 0) {
        ButtonName = other.ButtonName;
      }
      if (other.FriendlyName.Length != 0) {
        FriendlyName = other.FriendlyName;
      }
      if (other.Hotkey.Length != 0) {
        Hotkey = other.Hotkey;
      }
      if (other.RemapsToAbilityId != 0) {
        RemapsToAbilityId = other.RemapsToAbilityId;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.AllowMinimap != false) {
        AllowMinimap = other.AllowMinimap;
      }
      if (other.AllowAutocast != false) {
        AllowAutocast = other.AllowAutocast;
      }
      if (other.IsBuilding != false) {
        IsBuilding = other.IsBuilding;
      }
      if (other.FootprintRadius != 0F) {
        FootprintRadius = other.FootprintRadius;
      }
      if (other.IsInstantPlacement != false) {
        IsInstantPlacement = other.IsInstantPlacement;
      }
      if (other.CastRange != 0F) {
        CastRange = other.CastRange;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AbilityId = input.ReadUInt32();
            break;
          }
          case 18: {
            LinkName = input.ReadString();
            break;
          }
          case 24: {
            LinkIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            ButtonName = input.ReadString();
            break;
          }
          case 42: {
            FriendlyName = input.ReadString();
            break;
          }
          case 50: {
            Hotkey = input.ReadString();
            break;
          }
          case 56: {
            RemapsToAbilityId = input.ReadUInt32();
            break;
          }
          case 64: {
            Available = input.ReadBool();
            break;
          }
          case 72: {
            target_ = (global::SC2APIProtocol.AbilityData.Types.Target) input.ReadEnum();
            break;
          }
          case 80: {
            AllowMinimap = input.ReadBool();
            break;
          }
          case 88: {
            AllowAutocast = input.ReadBool();
            break;
          }
          case 96: {
            IsBuilding = input.ReadBool();
            break;
          }
          case 109: {
            FootprintRadius = input.ReadFloat();
            break;
          }
          case 112: {
            IsInstantPlacement = input.ReadBool();
            break;
          }
          case 125: {
            CastRange = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AbilityData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Target {
        [pbr::OriginalName("Target_UNSET")] Unset = 0,
        /// <summary>
        /// Does not require a target.
        /// </summary>
        [pbr::OriginalName("None")] None = 1,
        /// <summary>
        /// Requires a target position.
        /// </summary>
        [pbr::OriginalName("Point")] Point = 2,
        /// <summary>
        /// Requires a unit to target. Given by position using feature layers.
        /// </summary>
        [pbr::OriginalName("Unit")] Unit = 3,
        /// <summary>
        /// Requires either a target point or target unit.
        /// </summary>
        [pbr::OriginalName("PointOrUnit")] PointOrUnit = 4,
        /// <summary>
        /// Requires either a target point or no target. (eg. building add-ons)
        /// </summary>
        [pbr::OriginalName("PointOrNone")] PointOrNone = 5,
      }

    }
    #endregion

  }

  public sealed partial class DamageBonus : pb::IMessage<DamageBonus> {
    private static readonly pb::MessageParser<DamageBonus> _parser = new pb::MessageParser<DamageBonus>(() => new DamageBonus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageBonus(DamageBonus other) : this() {
      attribute_ = other.attribute_;
      bonus_ = other.bonus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageBonus Clone() {
      return new DamageBonus(this);
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 1;
    private global::SC2APIProtocol.Attribute attribute_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Attribute Attribute {
      get { return attribute_; }
      set {
        attribute_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 2;
    private float bonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamageBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamageBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Attribute != other.Attribute) return false;
      if (Bonus != other.Bonus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Attribute != 0) hash ^= Attribute.GetHashCode();
      if (Bonus != 0F) hash ^= Bonus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Attribute != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Attribute);
      }
      if (Bonus != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Bonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Attribute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Attribute);
      }
      if (Bonus != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamageBonus other) {
      if (other == null) {
        return;
      }
      if (other.Attribute != 0) {
        Attribute = other.Attribute;
      }
      if (other.Bonus != 0F) {
        Bonus = other.Bonus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            attribute_ = (global::SC2APIProtocol.Attribute) input.ReadEnum();
            break;
          }
          case 21: {
            Bonus = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Weapon : pb::IMessage<Weapon> {
    private static readonly pb::MessageParser<Weapon> _parser = new pb::MessageParser<Weapon>(() => new Weapon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Weapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon(Weapon other) : this() {
      type_ = other.type_;
      damage_ = other.damage_;
      damageBonus_ = other.damageBonus_.Clone();
      attacks_ = other.attacks_;
      range_ = other.range_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Weapon Clone() {
      return new Weapon(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::SC2APIProtocol.Weapon.Types.TargetType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Weapon.Types.TargetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private float damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "damage_bonus" field.</summary>
    public const int DamageBonusFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.DamageBonus> _repeated_damageBonus_codec
        = pb::FieldCodec.ForMessage(26, global::SC2APIProtocol.DamageBonus.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.DamageBonus> damageBonus_ = new pbc::RepeatedField<global::SC2APIProtocol.DamageBonus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.DamageBonus> DamageBonus {
      get { return damageBonus_; }
    }

    /// <summary>Field number for the "attacks" field.</summary>
    public const int AttacksFieldNumber = 4;
    private uint attacks_;
    /// <summary>
    /// Number of hits per attack. (eg. Colossus has 2 beams)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Attacks {
      get { return attacks_; }
      set {
        attacks_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 5;
    private float range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private float speed_;
    /// <summary>
    /// Time between attacks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Weapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Weapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Damage != other.Damage) return false;
      if(!damageBonus_.Equals(other.damageBonus_)) return false;
      if (Attacks != other.Attacks) return false;
      if (Range != other.Range) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Damage != 0F) hash ^= Damage.GetHashCode();
      hash ^= damageBonus_.GetHashCode();
      if (Attacks != 0) hash ^= Attacks.GetHashCode();
      if (Range != 0F) hash ^= Range.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Damage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Damage);
      }
      damageBonus_.WriteTo(output, _repeated_damageBonus_codec);
      if (Attacks != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Attacks);
      }
      if (Range != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Range);
      }
      if (Speed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Damage != 0F) {
        size += 1 + 4;
      }
      size += damageBonus_.CalculateSize(_repeated_damageBonus_codec);
      if (Attacks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Attacks);
      }
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Weapon other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Damage != 0F) {
        Damage = other.Damage;
      }
      damageBonus_.Add(other.damageBonus_);
      if (other.Attacks != 0) {
        Attacks = other.Attacks;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::SC2APIProtocol.Weapon.Types.TargetType) input.ReadEnum();
            break;
          }
          case 21: {
            Damage = input.ReadFloat();
            break;
          }
          case 26: {
            damageBonus_.AddEntriesFrom(input, _repeated_damageBonus_codec);
            break;
          }
          case 32: {
            Attacks = input.ReadUInt32();
            break;
          }
          case 45: {
            Range = input.ReadFloat();
            break;
          }
          case 53: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Weapon message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TargetType {
        [pbr::OriginalName("TargetType_UNSET")] Unset = 0,
        [pbr::OriginalName("Ground")] Ground = 1,
        [pbr::OriginalName("Air")] Air = 2,
        [pbr::OriginalName("Any")] Any = 3,
      }

    }
    #endregion

  }

  public sealed partial class UnitTypeData : pb::IMessage<UnitTypeData> {
    private static readonly pb::MessageParser<UnitTypeData> _parser = new pb::MessageParser<UnitTypeData>(() => new UnitTypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitTypeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitTypeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitTypeData(UnitTypeData other) : this() {
      unitId_ = other.unitId_;
      name_ = other.name_;
      available_ = other.available_;
      cargoSize_ = other.cargoSize_;
      mineralCost_ = other.mineralCost_;
      vespeneCost_ = other.vespeneCost_;
      foodRequired_ = other.foodRequired_;
      foodProvided_ = other.foodProvided_;
      abilityId_ = other.abilityId_;
      race_ = other.race_;
      buildTime_ = other.buildTime_;
      hasVespene_ = other.hasVespene_;
      hasMinerals_ = other.hasMinerals_;
      sightRange_ = other.sightRange_;
      techAlias_ = other.techAlias_.Clone();
      unitAlias_ = other.unitAlias_;
      techRequirement_ = other.techRequirement_;
      requireAttached_ = other.requireAttached_;
      attributes_ = other.attributes_.Clone();
      movementSpeed_ = other.movementSpeed_;
      armor_ = other.armor_;
      weapons_ = other.weapons_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitTypeData Clone() {
      return new UnitTypeData(this);
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    /// <summary>
    /// Stable ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Catalog name of the unit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 3;
    private bool available_;
    /// <summary>
    /// If true, the ability may be used by this set of mods/map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "cargo_size" field.</summary>
    public const int CargoSizeFieldNumber = 4;
    private uint cargoSize_;
    /// <summary>
    /// Number of cargo slots it occupies in transports.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CargoSize {
      get { return cargoSize_; }
      set {
        cargoSize_ = value;
      }
    }

    /// <summary>Field number for the "mineral_cost" field.</summary>
    public const int MineralCostFieldNumber = 12;
    private uint mineralCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MineralCost {
      get { return mineralCost_; }
      set {
        mineralCost_ = value;
      }
    }

    /// <summary>Field number for the "vespene_cost" field.</summary>
    public const int VespeneCostFieldNumber = 13;
    private uint vespeneCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VespeneCost {
      get { return vespeneCost_; }
      set {
        vespeneCost_ = value;
      }
    }

    /// <summary>Field number for the "food_required" field.</summary>
    public const int FoodRequiredFieldNumber = 14;
    private float foodRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FoodRequired {
      get { return foodRequired_; }
      set {
        foodRequired_ = value;
      }
    }

    /// <summary>Field number for the "food_provided" field.</summary>
    public const int FoodProvidedFieldNumber = 18;
    private float foodProvided_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FoodProvided {
      get { return foodProvided_; }
      set {
        foodProvided_ = value;
      }
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 15;
    private uint abilityId_;
    /// <summary>
    /// The ability that builds this unit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "race" field.</summary>
    public const int RaceFieldNumber = 16;
    private global::SC2APIProtocol.Race race_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Race Race {
      get { return race_; }
      set {
        race_ = value;
      }
    }

    /// <summary>Field number for the "build_time" field.</summary>
    public const int BuildTimeFieldNumber = 17;
    private float buildTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BuildTime {
      get { return buildTime_; }
      set {
        buildTime_ = value;
      }
    }

    /// <summary>Field number for the "has_vespene" field.</summary>
    public const int HasVespeneFieldNumber = 19;
    private bool hasVespene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVespene {
      get { return hasVespene_; }
      set {
        hasVespene_ = value;
      }
    }

    /// <summary>Field number for the "has_minerals" field.</summary>
    public const int HasMineralsFieldNumber = 20;
    private bool hasMinerals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMinerals {
      get { return hasMinerals_; }
      set {
        hasMinerals_ = value;
      }
    }

    /// <summary>Field number for the "sight_range" field.</summary>
    public const int SightRangeFieldNumber = 25;
    private float sightRange_;
    /// <summary>
    /// Range unit reveals vision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SightRange {
      get { return sightRange_; }
      set {
        sightRange_ = value;
      }
    }

    /// <summary>Field number for the "tech_alias" field.</summary>
    public const int TechAliasFieldNumber = 21;
    private static readonly pb::FieldCodec<uint> _repeated_techAlias_codec
        = pb::FieldCodec.ForUInt32(170);
    private readonly pbc::RepeatedField<uint> techAlias_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Other units that satisfy the same tech requirement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TechAlias {
      get { return techAlias_; }
    }

    /// <summary>Field number for the "unit_alias" field.</summary>
    public const int UnitAliasFieldNumber = 22;
    private uint unitAlias_;
    /// <summary>
    /// The morphed variant of this unit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitAlias {
      get { return unitAlias_; }
      set {
        unitAlias_ = value;
      }
    }

    /// <summary>Field number for the "tech_requirement" field.</summary>
    public const int TechRequirementFieldNumber = 23;
    private uint techRequirement_;
    /// <summary>
    /// Structure required to build this unit. (Or any with the same tech_alias)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TechRequirement {
      get { return techRequirement_; }
      set {
        techRequirement_ = value;
      }
    }

    /// <summary>Field number for the "require_attached" field.</summary>
    public const int RequireAttachedFieldNumber = 24;
    private bool requireAttached_;
    /// <summary>
    /// Whether tech_requirement is an add-on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireAttached {
      get { return requireAttached_; }
      set {
        requireAttached_ = value;
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.Attribute> _repeated_attributes_codec
        = pb::FieldCodec.ForEnum(66, x => (int) x, x => (global::SC2APIProtocol.Attribute) x);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.Attribute> attributes_ = new pbc::RepeatedField<global::SC2APIProtocol.Attribute>();
    /// <summary>
    /// Values include changes from upgrades
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.Attribute> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "movement_speed" field.</summary>
    public const int MovementSpeedFieldNumber = 9;
    private float movementSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MovementSpeed {
      get { return movementSpeed_; }
      set {
        movementSpeed_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 10;
    private float armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    /// <summary>Field number for the "weapons" field.</summary>
    public const int WeaponsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.Weapon> _repeated_weapons_codec
        = pb::FieldCodec.ForMessage(90, global::SC2APIProtocol.Weapon.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.Weapon> weapons_ = new pbc::RepeatedField<global::SC2APIProtocol.Weapon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.Weapon> Weapons {
      get { return weapons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitTypeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitTypeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitId != other.UnitId) return false;
      if (Name != other.Name) return false;
      if (Available != other.Available) return false;
      if (CargoSize != other.CargoSize) return false;
      if (MineralCost != other.MineralCost) return false;
      if (VespeneCost != other.VespeneCost) return false;
      if (FoodRequired != other.FoodRequired) return false;
      if (FoodProvided != other.FoodProvided) return false;
      if (AbilityId != other.AbilityId) return false;
      if (Race != other.Race) return false;
      if (BuildTime != other.BuildTime) return false;
      if (HasVespene != other.HasVespene) return false;
      if (HasMinerals != other.HasMinerals) return false;
      if (SightRange != other.SightRange) return false;
      if(!techAlias_.Equals(other.techAlias_)) return false;
      if (UnitAlias != other.UnitAlias) return false;
      if (TechRequirement != other.TechRequirement) return false;
      if (RequireAttached != other.RequireAttached) return false;
      if(!attributes_.Equals(other.attributes_)) return false;
      if (MovementSpeed != other.MovementSpeed) return false;
      if (Armor != other.Armor) return false;
      if(!weapons_.Equals(other.weapons_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Available != false) hash ^= Available.GetHashCode();
      if (CargoSize != 0) hash ^= CargoSize.GetHashCode();
      if (MineralCost != 0) hash ^= MineralCost.GetHashCode();
      if (VespeneCost != 0) hash ^= VespeneCost.GetHashCode();
      if (FoodRequired != 0F) hash ^= FoodRequired.GetHashCode();
      if (FoodProvided != 0F) hash ^= FoodProvided.GetHashCode();
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (Race != 0) hash ^= Race.GetHashCode();
      if (BuildTime != 0F) hash ^= BuildTime.GetHashCode();
      if (HasVespene != false) hash ^= HasVespene.GetHashCode();
      if (HasMinerals != false) hash ^= HasMinerals.GetHashCode();
      if (SightRange != 0F) hash ^= SightRange.GetHashCode();
      hash ^= techAlias_.GetHashCode();
      if (UnitAlias != 0) hash ^= UnitAlias.GetHashCode();
      if (TechRequirement != 0) hash ^= TechRequirement.GetHashCode();
      if (RequireAttached != false) hash ^= RequireAttached.GetHashCode();
      hash ^= attributes_.GetHashCode();
      if (MovementSpeed != 0F) hash ^= MovementSpeed.GetHashCode();
      if (Armor != 0F) hash ^= Armor.GetHashCode();
      hash ^= weapons_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Available != false) {
        output.WriteRawTag(24);
        output.WriteBool(Available);
      }
      if (CargoSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CargoSize);
      }
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (MovementSpeed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(MovementSpeed);
      }
      if (Armor != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Armor);
      }
      weapons_.WriteTo(output, _repeated_weapons_codec);
      if (MineralCost != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MineralCost);
      }
      if (VespeneCost != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(VespeneCost);
      }
      if (FoodRequired != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FoodRequired);
      }
      if (AbilityId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(AbilityId);
      }
      if (Race != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Race);
      }
      if (BuildTime != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(BuildTime);
      }
      if (FoodProvided != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(FoodProvided);
      }
      if (HasVespene != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(HasVespene);
      }
      if (HasMinerals != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasMinerals);
      }
      techAlias_.WriteTo(output, _repeated_techAlias_codec);
      if (UnitAlias != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(UnitAlias);
      }
      if (TechRequirement != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(TechRequirement);
      }
      if (RequireAttached != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(RequireAttached);
      }
      if (SightRange != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(SightRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Available != false) {
        size += 1 + 1;
      }
      if (CargoSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CargoSize);
      }
      if (MineralCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MineralCost);
      }
      if (VespeneCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VespeneCost);
      }
      if (FoodRequired != 0F) {
        size += 1 + 4;
      }
      if (FoodProvided != 0F) {
        size += 2 + 4;
      }
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
      }
      if (Race != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Race);
      }
      if (BuildTime != 0F) {
        size += 2 + 4;
      }
      if (HasVespene != false) {
        size += 2 + 1;
      }
      if (HasMinerals != false) {
        size += 2 + 1;
      }
      if (SightRange != 0F) {
        size += 2 + 4;
      }
      size += techAlias_.CalculateSize(_repeated_techAlias_codec);
      if (UnitAlias != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UnitAlias);
      }
      if (TechRequirement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TechRequirement);
      }
      if (RequireAttached != false) {
        size += 2 + 1;
      }
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (MovementSpeed != 0F) {
        size += 1 + 4;
      }
      if (Armor != 0F) {
        size += 1 + 4;
      }
      size += weapons_.CalculateSize(_repeated_weapons_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitTypeData other) {
      if (other == null) {
        return;
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      if (other.CargoSize != 0) {
        CargoSize = other.CargoSize;
      }
      if (other.MineralCost != 0) {
        MineralCost = other.MineralCost;
      }
      if (other.VespeneCost != 0) {
        VespeneCost = other.VespeneCost;
      }
      if (other.FoodRequired != 0F) {
        FoodRequired = other.FoodRequired;
      }
      if (other.FoodProvided != 0F) {
        FoodProvided = other.FoodProvided;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.Race != 0) {
        Race = other.Race;
      }
      if (other.BuildTime != 0F) {
        BuildTime = other.BuildTime;
      }
      if (other.HasVespene != false) {
        HasVespene = other.HasVespene;
      }
      if (other.HasMinerals != false) {
        HasMinerals = other.HasMinerals;
      }
      if (other.SightRange != 0F) {
        SightRange = other.SightRange;
      }
      techAlias_.Add(other.techAlias_);
      if (other.UnitAlias != 0) {
        UnitAlias = other.UnitAlias;
      }
      if (other.TechRequirement != 0) {
        TechRequirement = other.TechRequirement;
      }
      if (other.RequireAttached != false) {
        RequireAttached = other.RequireAttached;
      }
      attributes_.Add(other.attributes_);
      if (other.MovementSpeed != 0F) {
        MovementSpeed = other.MovementSpeed;
      }
      if (other.Armor != 0F) {
        Armor = other.Armor;
      }
      weapons_.Add(other.weapons_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Available = input.ReadBool();
            break;
          }
          case 32: {
            CargoSize = input.ReadUInt32();
            break;
          }
          case 66:
          case 64: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 77: {
            MovementSpeed = input.ReadFloat();
            break;
          }
          case 85: {
            Armor = input.ReadFloat();
            break;
          }
          case 90: {
            weapons_.AddEntriesFrom(input, _repeated_weapons_codec);
            break;
          }
          case 96: {
            MineralCost = input.ReadUInt32();
            break;
          }
          case 104: {
            VespeneCost = input.ReadUInt32();
            break;
          }
          case 117: {
            FoodRequired = input.ReadFloat();
            break;
          }
          case 120: {
            AbilityId = input.ReadUInt32();
            break;
          }
          case 128: {
            race_ = (global::SC2APIProtocol.Race) input.ReadEnum();
            break;
          }
          case 141: {
            BuildTime = input.ReadFloat();
            break;
          }
          case 149: {
            FoodProvided = input.ReadFloat();
            break;
          }
          case 152: {
            HasVespene = input.ReadBool();
            break;
          }
          case 160: {
            HasMinerals = input.ReadBool();
            break;
          }
          case 170:
          case 168: {
            techAlias_.AddEntriesFrom(input, _repeated_techAlias_codec);
            break;
          }
          case 176: {
            UnitAlias = input.ReadUInt32();
            break;
          }
          case 184: {
            TechRequirement = input.ReadUInt32();
            break;
          }
          case 192: {
            RequireAttached = input.ReadBool();
            break;
          }
          case 205: {
            SightRange = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpgradeData : pb::IMessage<UpgradeData> {
    private static readonly pb::MessageParser<UpgradeData> _parser = new pb::MessageParser<UpgradeData>(() => new UpgradeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpgradeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeData(UpgradeData other) : this() {
      upgradeId_ = other.upgradeId_;
      name_ = other.name_;
      mineralCost_ = other.mineralCost_;
      vespeneCost_ = other.vespeneCost_;
      researchTime_ = other.researchTime_;
      abilityId_ = other.abilityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpgradeData Clone() {
      return new UpgradeData(this);
    }

    /// <summary>Field number for the "upgrade_id" field.</summary>
    public const int UpgradeIdFieldNumber = 1;
    private uint upgradeId_;
    /// <summary>
    /// Stable ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpgradeId {
      get { return upgradeId_; }
      set {
        upgradeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mineral_cost" field.</summary>
    public const int MineralCostFieldNumber = 3;
    private uint mineralCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MineralCost {
      get { return mineralCost_; }
      set {
        mineralCost_ = value;
      }
    }

    /// <summary>Field number for the "vespene_cost" field.</summary>
    public const int VespeneCostFieldNumber = 4;
    private uint vespeneCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VespeneCost {
      get { return vespeneCost_; }
      set {
        vespeneCost_ = value;
      }
    }

    /// <summary>Field number for the "research_time" field.</summary>
    public const int ResearchTimeFieldNumber = 5;
    private float researchTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ResearchTime {
      get { return researchTime_; }
      set {
        researchTime_ = value;
      }
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 6;
    private uint abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpgradeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpgradeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpgradeId != other.UpgradeId) return false;
      if (Name != other.Name) return false;
      if (MineralCost != other.MineralCost) return false;
      if (VespeneCost != other.VespeneCost) return false;
      if (ResearchTime != other.ResearchTime) return false;
      if (AbilityId != other.AbilityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpgradeId != 0) hash ^= UpgradeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MineralCost != 0) hash ^= MineralCost.GetHashCode();
      if (VespeneCost != 0) hash ^= VespeneCost.GetHashCode();
      if (ResearchTime != 0F) hash ^= ResearchTime.GetHashCode();
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpgradeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UpgradeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (MineralCost != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MineralCost);
      }
      if (VespeneCost != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VespeneCost);
      }
      if (ResearchTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ResearchTime);
      }
      if (AbilityId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AbilityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpgradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpgradeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MineralCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MineralCost);
      }
      if (VespeneCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VespeneCost);
      }
      if (ResearchTime != 0F) {
        size += 1 + 4;
      }
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpgradeData other) {
      if (other == null) {
        return;
      }
      if (other.UpgradeId != 0) {
        UpgradeId = other.UpgradeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MineralCost != 0) {
        MineralCost = other.MineralCost;
      }
      if (other.VespeneCost != 0) {
        VespeneCost = other.VespeneCost;
      }
      if (other.ResearchTime != 0F) {
        ResearchTime = other.ResearchTime;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UpgradeId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            MineralCost = input.ReadUInt32();
            break;
          }
          case 32: {
            VespeneCost = input.ReadUInt32();
            break;
          }
          case 45: {
            ResearchTime = input.ReadFloat();
            break;
          }
          case 48: {
            AbilityId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuffData : pb::IMessage<BuffData> {
    private static readonly pb::MessageParser<BuffData> _parser = new pb::MessageParser<BuffData>(() => new BuffData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffData(BuffData other) : this() {
      buffId_ = other.buffId_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffData Clone() {
      return new BuffData(this);
    }

    /// <summary>Field number for the "buff_id" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private uint buffId_;
    /// <summary>
    /// Stable ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffId != other.BuffId) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffId != 0) hash ^= BuffId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuffId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffData other) {
      if (other == null) {
        return;
      }
      if (other.BuffId != 0) {
        BuffId = other.BuffId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuffId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectData : pb::IMessage<EffectData> {
    private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => new EffectData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.DataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData(EffectData other) : this() {
      effectId_ = other.effectId_;
      name_ = other.name_;
      friendlyName_ = other.friendlyName_;
      radius_ = other.radius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData Clone() {
      return new EffectData(this);
    }

    /// <summary>Field number for the "effect_id" field.</summary>
    public const int EffectIdFieldNumber = 1;
    private uint effectId_;
    /// <summary>
    /// Stable ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "friendly_name" field.</summary>
    public const int FriendlyNameFieldNumber = 3;
    private string friendlyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FriendlyName {
      get { return friendlyName_; }
      set {
        friendlyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectId != other.EffectId) return false;
      if (Name != other.Name) return false;
      if (FriendlyName != other.FriendlyName) return false;
      if (Radius != other.Radius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FriendlyName.Length != 0) hash ^= FriendlyName.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EffectId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FriendlyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FriendlyName);
      }
      if (Radius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Radius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FriendlyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FriendlyName);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectData other) {
      if (other == null) {
        return;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FriendlyName.Length != 0) {
        FriendlyName = other.FriendlyName;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EffectId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            FriendlyName = input.ReadString();
            break;
          }
          case 37: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
