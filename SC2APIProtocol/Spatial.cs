// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/spatial.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol {

  /// <summary>Holder for reflection information generated from s2clientprotocol/spatial.proto</summary>
  public static partial class SpatialReflection {

    #region Descriptor
    /// <summary>File descriptor for s2clientprotocol/spatial.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpatialReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5zMmNsaWVudHByb3RvY29sL3NwYXRpYWwucHJvdG8SDlNDMkFQSVByb3Rv",
            "Y29sGh1zMmNsaWVudHByb3RvY29sL2NvbW1vbi5wcm90byKIAQoXT2JzZXJ2",
            "YXRpb25GZWF0dXJlTGF5ZXISLgoHcmVuZGVycxgBIAEoCzIdLlNDMkFQSVBy",
            "b3RvY29sLkZlYXR1cmVMYXllcnMSPQoPbWluaW1hcF9yZW5kZXJzGAIgASgL",
            "MiQuU0MyQVBJUHJvdG9jb2wuRmVhdHVyZUxheWVyc01pbmltYXAirAgKDUZl",
            "YXR1cmVMYXllcnMSLQoKaGVpZ2h0X21hcBgBIAEoCzIZLlNDMkFQSVByb3Rv",
            "Y29sLkltYWdlRGF0YRIxCg52aXNpYmlsaXR5X21hcBgCIAEoCzIZLlNDMkFQ",
            "SVByb3RvY29sLkltYWdlRGF0YRIoCgVjcmVlcBgDIAEoCzIZLlNDMkFQSVBy",
            "b3RvY29sLkltYWdlRGF0YRIoCgVwb3dlchgEIAEoCzIZLlNDMkFQSVByb3Rv",
            "Y29sLkltYWdlRGF0YRIsCglwbGF5ZXJfaWQYBSABKAsyGS5TQzJBUElQcm90",
            "b2NvbC5JbWFnZURhdGESLAoJdW5pdF90eXBlGAYgASgLMhkuU0MyQVBJUHJv",
            "dG9jb2wuSW1hZ2VEYXRhEisKCHNlbGVjdGVkGAcgASgLMhkuU0MyQVBJUHJv",
            "dG9jb2wuSW1hZ2VEYXRhEjIKD3VuaXRfaGl0X3BvaW50cxgIIAEoCzIZLlND",
            "MkFQSVByb3RvY29sLkltYWdlRGF0YRI4ChV1bml0X2hpdF9wb2ludHNfcmF0",
            "aW8YESABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESLgoLdW5pdF9l",
            "bmVyZ3kYCSABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESNAoRdW5p",
            "dF9lbmVyZ3lfcmF0aW8YEiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURh",
            "dGESLwoMdW5pdF9zaGllbGRzGAogASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1h",
            "Z2VEYXRhEjUKEnVuaXRfc2hpZWxkc19yYXRpbxgTIAEoCzIZLlNDMkFQSVBy",
            "b3RvY29sLkltYWdlRGF0YRIyCg9wbGF5ZXJfcmVsYXRpdmUYCyABKAsyGS5T",
            "QzJBUElQcm90b2NvbC5JbWFnZURhdGESMgoPdW5pdF9kZW5zaXR5X2FhGA4g",
            "ASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEi8KDHVuaXRfZGVuc2l0",
            "eRgPIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIqCgdlZmZlY3Rz",
            "GBQgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEjEKDmhhbGx1Y2lu",
            "YXRpb25zGBUgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRhEioKB2Ns",
            "b2FrZWQYFiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESJwoEYmxp",
            "cBgXIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIoCgVidWZmcxgY",
            "IAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YRIpCgZhY3RpdmUYGSAB",
            "KAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGEitQMKFEZlYXR1cmVMYXll",
            "cnNNaW5pbWFwEi0KCmhlaWdodF9tYXAYASABKAsyGS5TQzJBUElQcm90b2Nv",
            "bC5JbWFnZURhdGESMQoOdmlzaWJpbGl0eV9tYXAYAiABKAsyGS5TQzJBUElQ",
            "cm90b2NvbC5JbWFnZURhdGESKAoFY3JlZXAYAyABKAsyGS5TQzJBUElQcm90",
            "b2NvbC5JbWFnZURhdGESKQoGY2FtZXJhGAQgASgLMhkuU0MyQVBJUHJvdG9j",
            "b2wuSW1hZ2VEYXRhEiwKCXBsYXllcl9pZBgFIAEoCzIZLlNDMkFQSVByb3Rv",
            "Y29sLkltYWdlRGF0YRIyCg9wbGF5ZXJfcmVsYXRpdmUYBiABKAsyGS5TQzJB",
            "UElQcm90b2NvbC5JbWFnZURhdGESKwoIc2VsZWN0ZWQYByABKAsyGS5TQzJB",
            "UElQcm90b2NvbC5JbWFnZURhdGESKQoGYWxlcnRzGAkgASgLMhkuU0MyQVBJ",
            "UHJvdG9jb2wuSW1hZ2VEYXRhEiwKCXVuaXRfdHlwZRgIIAEoCzIZLlNDMkFQ",
            "SVByb3RvY29sLkltYWdlRGF0YSJnChFPYnNlcnZhdGlvblJlbmRlchImCgNt",
            "YXAYASABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURhdGESKgoHbWluaW1h",
            "cBgCIAEoCzIZLlNDMkFQSVByb3RvY29sLkltYWdlRGF0YSK7AgoNQWN0aW9u",
            "U3BhdGlhbBJACgx1bml0X2NvbW1hbmQYASABKAsyKC5TQzJBUElQcm90b2Nv",
            "bC5BY3Rpb25TcGF0aWFsVW5pdENvbW1hbmRIABI+CgtjYW1lcmFfbW92ZRgC",
            "IAEoCzInLlNDMkFQSVByb3RvY29sLkFjdGlvblNwYXRpYWxDYW1lcmFNb3Zl",
            "SAASTwoUdW5pdF9zZWxlY3Rpb25fcG9pbnQYAyABKAsyLy5TQzJBUElQcm90",
            "b2NvbC5BY3Rpb25TcGF0aWFsVW5pdFNlbGVjdGlvblBvaW50SAASTQoTdW5p",
            "dF9zZWxlY3Rpb25fcmVjdBgEIAEoCzIuLlNDMkFQSVByb3RvY29sLkFjdGlv",
            "blNwYXRpYWxVbml0U2VsZWN0aW9uUmVjdEgAQggKBmFjdGlvbiK+AQoYQWN0",
            "aW9uU3BhdGlhbFVuaXRDb21tYW5kEhIKCmFiaWxpdHlfaWQYASABKAUSNQoT",
            "dGFyZ2V0X3NjcmVlbl9jb29yZBgCIAEoCzIWLlNDMkFQSVByb3RvY29sLlBv",
            "aW50SUgAEjYKFHRhcmdldF9taW5pbWFwX2Nvb3JkGAMgASgLMhYuU0MyQVBJ",
            "UHJvdG9jb2wuUG9pbnRJSAASFQoNcXVldWVfY29tbWFuZBgEIAEoCEIICgZ0",
            "YXJnZXQiSQoXQWN0aW9uU3BhdGlhbENhbWVyYU1vdmUSLgoOY2VudGVyX21p",
            "bmltYXAYASABKAsyFi5TQzJBUElQcm90b2NvbC5Qb2ludEki6gEKH0FjdGlv",
            "blNwYXRpYWxVbml0U2VsZWN0aW9uUG9pbnQSNgoWc2VsZWN0aW9uX3NjcmVl",
            "bl9jb29yZBgBIAEoCzIWLlNDMkFQSVByb3RvY29sLlBvaW50SRJCCgR0eXBl",
            "GAIgASgOMjQuU0MyQVBJUHJvdG9jb2wuQWN0aW9uU3BhdGlhbFVuaXRTZWxl",
            "Y3Rpb25Qb2ludC5UeXBlIksKBFR5cGUSDgoKVHlwZV9VTlNFVBAAEgoKBlNl",
            "bGVjdBABEgoKBlRvZ2dsZRACEgsKB0FsbFR5cGUQAxIOCgpBZGRBbGxUeXBl",
            "EAQicwoeQWN0aW9uU3BhdGlhbFVuaXRTZWxlY3Rpb25SZWN0EjoKFnNlbGVj",
            "dGlvbl9zY3JlZW5fY29vcmQYASADKAsyGi5TQzJBUElQcm90b2NvbC5SZWN0",
            "YW5nbGVJEhUKDXNlbGVjdGlvbl9hZGQYAiABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObservationFeatureLayer), global::SC2APIProtocol.ObservationFeatureLayer.Parser, new[]{ "Renders", "MinimapRenders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.FeatureLayers), global::SC2APIProtocol.FeatureLayers.Parser, new[]{ "HeightMap", "VisibilityMap", "Creep", "Power", "PlayerId", "UnitType", "Selected", "UnitHitPoints", "UnitHitPointsRatio", "UnitEnergy", "UnitEnergyRatio", "UnitShields", "UnitShieldsRatio", "PlayerRelative", "UnitDensityAa", "UnitDensity", "Effects", "Hallucinations", "Cloaked", "Blip", "Buffs", "Active" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.FeatureLayersMinimap), global::SC2APIProtocol.FeatureLayersMinimap.Parser, new[]{ "HeightMap", "VisibilityMap", "Creep", "Camera", "PlayerId", "PlayerRelative", "Selected", "Alerts", "UnitType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObservationRender), global::SC2APIProtocol.ObservationRender.Parser, new[]{ "Map", "Minimap" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatial), global::SC2APIProtocol.ActionSpatial.Parser, new[]{ "UnitCommand", "CameraMove", "UnitSelectionPoint", "UnitSelectionRect" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialUnitCommand), global::SC2APIProtocol.ActionSpatialUnitCommand.Parser, new[]{ "AbilityId", "TargetScreenCoord", "TargetMinimapCoord", "QueueCommand" }, new[]{ "Target" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialCameraMove), global::SC2APIProtocol.ActionSpatialCameraMove.Parser, new[]{ "CenterMinimap" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialUnitSelectionPoint), global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Parser, new[]{ "SelectionScreenCoord", "Type" }, null, new[]{ typeof(global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionSpatialUnitSelectionRect), global::SC2APIProtocol.ActionSpatialUnitSelectionRect.Parser, new[]{ "SelectionScreenCoord", "SelectionAdd" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ObservationFeatureLayer : pb::IMessage<ObservationFeatureLayer> {
    private static readonly pb::MessageParser<ObservationFeatureLayer> _parser = new pb::MessageParser<ObservationFeatureLayer>(() => new ObservationFeatureLayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObservationFeatureLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationFeatureLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationFeatureLayer(ObservationFeatureLayer other) : this() {
      Renders = other.renders_ != null ? other.Renders.Clone() : null;
      MinimapRenders = other.minimapRenders_ != null ? other.MinimapRenders.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationFeatureLayer Clone() {
      return new ObservationFeatureLayer(this);
    }

    /// <summary>Field number for the "renders" field.</summary>
    public const int RendersFieldNumber = 1;
    private global::SC2APIProtocol.FeatureLayers renders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.FeatureLayers Renders {
      get { return renders_; }
      set {
        renders_ = value;
      }
    }

    /// <summary>Field number for the "minimap_renders" field.</summary>
    public const int MinimapRendersFieldNumber = 2;
    private global::SC2APIProtocol.FeatureLayersMinimap minimapRenders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.FeatureLayersMinimap MinimapRenders {
      get { return minimapRenders_; }
      set {
        minimapRenders_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObservationFeatureLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObservationFeatureLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Renders, other.Renders)) return false;
      if (!object.Equals(MinimapRenders, other.MinimapRenders)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (renders_ != null) hash ^= Renders.GetHashCode();
      if (minimapRenders_ != null) hash ^= MinimapRenders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (renders_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Renders);
      }
      if (minimapRenders_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MinimapRenders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (renders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Renders);
      }
      if (minimapRenders_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinimapRenders);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObservationFeatureLayer other) {
      if (other == null) {
        return;
      }
      if (other.renders_ != null) {
        if (renders_ == null) {
          renders_ = new global::SC2APIProtocol.FeatureLayers();
        }
        Renders.MergeFrom(other.Renders);
      }
      if (other.minimapRenders_ != null) {
        if (minimapRenders_ == null) {
          minimapRenders_ = new global::SC2APIProtocol.FeatureLayersMinimap();
        }
        MinimapRenders.MergeFrom(other.MinimapRenders);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (renders_ == null) {
              renders_ = new global::SC2APIProtocol.FeatureLayers();
            }
            input.ReadMessage(renders_);
            break;
          }
          case 18: {
            if (minimapRenders_ == null) {
              minimapRenders_ = new global::SC2APIProtocol.FeatureLayersMinimap();
            }
            input.ReadMessage(minimapRenders_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeatureLayers : pb::IMessage<FeatureLayers> {
    private static readonly pb::MessageParser<FeatureLayers> _parser = new pb::MessageParser<FeatureLayers>(() => new FeatureLayers());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureLayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureLayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureLayers(FeatureLayers other) : this() {
      HeightMap = other.heightMap_ != null ? other.HeightMap.Clone() : null;
      VisibilityMap = other.visibilityMap_ != null ? other.VisibilityMap.Clone() : null;
      Creep = other.creep_ != null ? other.Creep.Clone() : null;
      Power = other.power_ != null ? other.Power.Clone() : null;
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      UnitType = other.unitType_ != null ? other.UnitType.Clone() : null;
      Selected = other.selected_ != null ? other.Selected.Clone() : null;
      UnitHitPoints = other.unitHitPoints_ != null ? other.UnitHitPoints.Clone() : null;
      UnitHitPointsRatio = other.unitHitPointsRatio_ != null ? other.UnitHitPointsRatio.Clone() : null;
      UnitEnergy = other.unitEnergy_ != null ? other.UnitEnergy.Clone() : null;
      UnitEnergyRatio = other.unitEnergyRatio_ != null ? other.UnitEnergyRatio.Clone() : null;
      UnitShields = other.unitShields_ != null ? other.UnitShields.Clone() : null;
      UnitShieldsRatio = other.unitShieldsRatio_ != null ? other.UnitShieldsRatio.Clone() : null;
      PlayerRelative = other.playerRelative_ != null ? other.PlayerRelative.Clone() : null;
      UnitDensityAa = other.unitDensityAa_ != null ? other.UnitDensityAa.Clone() : null;
      UnitDensity = other.unitDensity_ != null ? other.UnitDensity.Clone() : null;
      Effects = other.effects_ != null ? other.Effects.Clone() : null;
      Hallucinations = other.hallucinations_ != null ? other.Hallucinations.Clone() : null;
      Cloaked = other.cloaked_ != null ? other.Cloaked.Clone() : null;
      Blip = other.blip_ != null ? other.Blip.Clone() : null;
      Buffs = other.buffs_ != null ? other.Buffs.Clone() : null;
      Active = other.active_ != null ? other.Active.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureLayers Clone() {
      return new FeatureLayers(this);
    }

    /// <summary>Field number for the "height_map" field.</summary>
    public const int HeightMapFieldNumber = 1;
    private global::SC2APIProtocol.ImageData heightMap_;
    /// <summary>
    /// uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData HeightMap {
      get { return heightMap_; }
      set {
        heightMap_ = value;
      }
    }

    /// <summary>Field number for the "visibility_map" field.</summary>
    public const int VisibilityMapFieldNumber = 2;
    private global::SC2APIProtocol.ImageData visibilityMap_;
    /// <summary>
    /// uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData VisibilityMap {
      get { return visibilityMap_; }
      set {
        visibilityMap_ = value;
      }
    }

    /// <summary>Field number for the "creep" field.</summary>
    public const int CreepFieldNumber = 3;
    private global::SC2APIProtocol.ImageData creep_;
    /// <summary>
    /// 1-bit. Zerg creep.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Creep {
      get { return creep_; }
      set {
        creep_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private global::SC2APIProtocol.ImageData power_;
    /// <summary>
    /// 1-bit. Protoss power.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private global::SC2APIProtocol.ImageData playerId_;
    /// <summary>
    /// uint8. Participants: [1, 15] Neutral: 16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 6;
    private global::SC2APIProtocol.ImageData unitType_;
    /// <summary>
    /// int32. Unique identifier for type of unit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "selected" field.</summary>
    public const int SelectedFieldNumber = 7;
    private global::SC2APIProtocol.ImageData selected_;
    /// <summary>
    /// 1-bit. Selected units.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Selected {
      get { return selected_; }
      set {
        selected_ = value;
      }
    }

    /// <summary>Field number for the "unit_hit_points" field.</summary>
    public const int UnitHitPointsFieldNumber = 8;
    private global::SC2APIProtocol.ImageData unitHitPoints_;
    /// <summary>
    /// int32.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitHitPoints {
      get { return unitHitPoints_; }
      set {
        unitHitPoints_ = value;
      }
    }

    /// <summary>Field number for the "unit_hit_points_ratio" field.</summary>
    public const int UnitHitPointsRatioFieldNumber = 17;
    private global::SC2APIProtocol.ImageData unitHitPointsRatio_;
    /// <summary>
    /// uint8. Ratio of current health to max health. [0%, 100%] encoded into [0, 255].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitHitPointsRatio {
      get { return unitHitPointsRatio_; }
      set {
        unitHitPointsRatio_ = value;
      }
    }

    /// <summary>Field number for the "unit_energy" field.</summary>
    public const int UnitEnergyFieldNumber = 9;
    private global::SC2APIProtocol.ImageData unitEnergy_;
    /// <summary>
    /// int32.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitEnergy {
      get { return unitEnergy_; }
      set {
        unitEnergy_ = value;
      }
    }

    /// <summary>Field number for the "unit_energy_ratio" field.</summary>
    public const int UnitEnergyRatioFieldNumber = 18;
    private global::SC2APIProtocol.ImageData unitEnergyRatio_;
    /// <summary>
    /// uint8. Ratio of current energy to max energy. [0%, 100%] encoded into [0, 255].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitEnergyRatio {
      get { return unitEnergyRatio_; }
      set {
        unitEnergyRatio_ = value;
      }
    }

    /// <summary>Field number for the "unit_shields" field.</summary>
    public const int UnitShieldsFieldNumber = 10;
    private global::SC2APIProtocol.ImageData unitShields_;
    /// <summary>
    /// int32.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitShields {
      get { return unitShields_; }
      set {
        unitShields_ = value;
      }
    }

    /// <summary>Field number for the "unit_shields_ratio" field.</summary>
    public const int UnitShieldsRatioFieldNumber = 19;
    private global::SC2APIProtocol.ImageData unitShieldsRatio_;
    /// <summary>
    /// uint8. Ratio of current shields to max shields. [0%, 100%] encoded into [0, 255].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitShieldsRatio {
      get { return unitShieldsRatio_; }
      set {
        unitShieldsRatio_ = value;
      }
    }

    /// <summary>Field number for the "player_relative" field.</summary>
    public const int PlayerRelativeFieldNumber = 11;
    private global::SC2APIProtocol.ImageData playerRelative_;
    /// <summary>
    /// uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData PlayerRelative {
      get { return playerRelative_; }
      set {
        playerRelative_ = value;
      }
    }

    /// <summary>Field number for the "unit_density_aa" field.</summary>
    public const int UnitDensityAaFieldNumber = 14;
    private global::SC2APIProtocol.ImageData unitDensityAa_;
    /// <summary>
    /// uint8. Density of units overlapping a pixel, anti-aliased. [0.0, 16.0f] encoded into [0, 255].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitDensityAa {
      get { return unitDensityAa_; }
      set {
        unitDensityAa_ = value;
      }
    }

    /// <summary>Field number for the "unit_density" field.</summary>
    public const int UnitDensityFieldNumber = 15;
    private global::SC2APIProtocol.ImageData unitDensity_;
    /// <summary>
    /// uint8. Count of units overlapping a pixel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitDensity {
      get { return unitDensity_; }
      set {
        unitDensity_ = value;
      }
    }

    /// <summary>Field number for the "effects" field.</summary>
    public const int EffectsFieldNumber = 20;
    private global::SC2APIProtocol.ImageData effects_;
    /// <summary>
    /// uint8. Visuals of persistent abilities. (eg. Psistorm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Effects {
      get { return effects_; }
      set {
        effects_ = value;
      }
    }

    /// <summary>Field number for the "hallucinations" field.</summary>
    public const int HallucinationsFieldNumber = 21;
    private global::SC2APIProtocol.ImageData hallucinations_;
    /// <summary>
    /// 1-bit. Whether the unit here is a hallucination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Hallucinations {
      get { return hallucinations_; }
      set {
        hallucinations_ = value;
      }
    }

    /// <summary>Field number for the "cloaked" field.</summary>
    public const int CloakedFieldNumber = 22;
    private global::SC2APIProtocol.ImageData cloaked_;
    /// <summary>
    /// 1-bit. Whether the unit here is cloaked. Hidden units will show up too, but with less details in other layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Cloaked {
      get { return cloaked_; }
      set {
        cloaked_ = value;
      }
    }

    /// <summary>Field number for the "blip" field.</summary>
    public const int BlipFieldNumber = 23;
    private global::SC2APIProtocol.ImageData blip_;
    /// <summary>
    /// 1-bit. Whether the unit here is a blip.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Blip {
      get { return blip_; }
      set {
        blip_ = value;
      }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 24;
    private global::SC2APIProtocol.ImageData buffs_;
    /// <summary>
    /// int32. One of the buffs applied to this unit. Extras are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Buffs {
      get { return buffs_; }
      set {
        buffs_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 25;
    private global::SC2APIProtocol.ImageData active_;
    /// <summary>
    /// 1-bit. Whether the unit here is active.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureLayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureLayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HeightMap, other.HeightMap)) return false;
      if (!object.Equals(VisibilityMap, other.VisibilityMap)) return false;
      if (!object.Equals(Creep, other.Creep)) return false;
      if (!object.Equals(Power, other.Power)) return false;
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (!object.Equals(UnitType, other.UnitType)) return false;
      if (!object.Equals(Selected, other.Selected)) return false;
      if (!object.Equals(UnitHitPoints, other.UnitHitPoints)) return false;
      if (!object.Equals(UnitHitPointsRatio, other.UnitHitPointsRatio)) return false;
      if (!object.Equals(UnitEnergy, other.UnitEnergy)) return false;
      if (!object.Equals(UnitEnergyRatio, other.UnitEnergyRatio)) return false;
      if (!object.Equals(UnitShields, other.UnitShields)) return false;
      if (!object.Equals(UnitShieldsRatio, other.UnitShieldsRatio)) return false;
      if (!object.Equals(PlayerRelative, other.PlayerRelative)) return false;
      if (!object.Equals(UnitDensityAa, other.UnitDensityAa)) return false;
      if (!object.Equals(UnitDensity, other.UnitDensity)) return false;
      if (!object.Equals(Effects, other.Effects)) return false;
      if (!object.Equals(Hallucinations, other.Hallucinations)) return false;
      if (!object.Equals(Cloaked, other.Cloaked)) return false;
      if (!object.Equals(Blip, other.Blip)) return false;
      if (!object.Equals(Buffs, other.Buffs)) return false;
      if (!object.Equals(Active, other.Active)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heightMap_ != null) hash ^= HeightMap.GetHashCode();
      if (visibilityMap_ != null) hash ^= VisibilityMap.GetHashCode();
      if (creep_ != null) hash ^= Creep.GetHashCode();
      if (power_ != null) hash ^= Power.GetHashCode();
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (unitType_ != null) hash ^= UnitType.GetHashCode();
      if (selected_ != null) hash ^= Selected.GetHashCode();
      if (unitHitPoints_ != null) hash ^= UnitHitPoints.GetHashCode();
      if (unitHitPointsRatio_ != null) hash ^= UnitHitPointsRatio.GetHashCode();
      if (unitEnergy_ != null) hash ^= UnitEnergy.GetHashCode();
      if (unitEnergyRatio_ != null) hash ^= UnitEnergyRatio.GetHashCode();
      if (unitShields_ != null) hash ^= UnitShields.GetHashCode();
      if (unitShieldsRatio_ != null) hash ^= UnitShieldsRatio.GetHashCode();
      if (playerRelative_ != null) hash ^= PlayerRelative.GetHashCode();
      if (unitDensityAa_ != null) hash ^= UnitDensityAa.GetHashCode();
      if (unitDensity_ != null) hash ^= UnitDensity.GetHashCode();
      if (effects_ != null) hash ^= Effects.GetHashCode();
      if (hallucinations_ != null) hash ^= Hallucinations.GetHashCode();
      if (cloaked_ != null) hash ^= Cloaked.GetHashCode();
      if (blip_ != null) hash ^= Blip.GetHashCode();
      if (buffs_ != null) hash ^= Buffs.GetHashCode();
      if (active_ != null) hash ^= Active.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heightMap_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HeightMap);
      }
      if (visibilityMap_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VisibilityMap);
      }
      if (creep_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Creep);
      }
      if (power_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Power);
      }
      if (playerId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerId);
      }
      if (unitType_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UnitType);
      }
      if (selected_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Selected);
      }
      if (unitHitPoints_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UnitHitPoints);
      }
      if (unitEnergy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UnitEnergy);
      }
      if (unitShields_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UnitShields);
      }
      if (playerRelative_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PlayerRelative);
      }
      if (unitDensityAa_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UnitDensityAa);
      }
      if (unitDensity_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UnitDensity);
      }
      if (unitHitPointsRatio_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(UnitHitPointsRatio);
      }
      if (unitEnergyRatio_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(UnitEnergyRatio);
      }
      if (unitShieldsRatio_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(UnitShieldsRatio);
      }
      if (effects_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Effects);
      }
      if (hallucinations_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Hallucinations);
      }
      if (cloaked_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Cloaked);
      }
      if (blip_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Blip);
      }
      if (buffs_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Buffs);
      }
      if (active_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Active);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heightMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeightMap);
      }
      if (visibilityMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisibilityMap);
      }
      if (creep_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creep);
      }
      if (power_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Power);
      }
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (unitType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitType);
      }
      if (selected_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selected);
      }
      if (unitHitPoints_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitHitPoints);
      }
      if (unitHitPointsRatio_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitHitPointsRatio);
      }
      if (unitEnergy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitEnergy);
      }
      if (unitEnergyRatio_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitEnergyRatio);
      }
      if (unitShields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitShields);
      }
      if (unitShieldsRatio_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UnitShieldsRatio);
      }
      if (playerRelative_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerRelative);
      }
      if (unitDensityAa_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitDensityAa);
      }
      if (unitDensity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitDensity);
      }
      if (effects_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Effects);
      }
      if (hallucinations_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hallucinations);
      }
      if (cloaked_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cloaked);
      }
      if (blip_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Blip);
      }
      if (buffs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Buffs);
      }
      if (active_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Active);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureLayers other) {
      if (other == null) {
        return;
      }
      if (other.heightMap_ != null) {
        if (heightMap_ == null) {
          heightMap_ = new global::SC2APIProtocol.ImageData();
        }
        HeightMap.MergeFrom(other.HeightMap);
      }
      if (other.visibilityMap_ != null) {
        if (visibilityMap_ == null) {
          visibilityMap_ = new global::SC2APIProtocol.ImageData();
        }
        VisibilityMap.MergeFrom(other.VisibilityMap);
      }
      if (other.creep_ != null) {
        if (creep_ == null) {
          creep_ = new global::SC2APIProtocol.ImageData();
        }
        Creep.MergeFrom(other.Creep);
      }
      if (other.power_ != null) {
        if (power_ == null) {
          power_ = new global::SC2APIProtocol.ImageData();
        }
        Power.MergeFrom(other.Power);
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          playerId_ = new global::SC2APIProtocol.ImageData();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.unitType_ != null) {
        if (unitType_ == null) {
          unitType_ = new global::SC2APIProtocol.ImageData();
        }
        UnitType.MergeFrom(other.UnitType);
      }
      if (other.selected_ != null) {
        if (selected_ == null) {
          selected_ = new global::SC2APIProtocol.ImageData();
        }
        Selected.MergeFrom(other.Selected);
      }
      if (other.unitHitPoints_ != null) {
        if (unitHitPoints_ == null) {
          unitHitPoints_ = new global::SC2APIProtocol.ImageData();
        }
        UnitHitPoints.MergeFrom(other.UnitHitPoints);
      }
      if (other.unitHitPointsRatio_ != null) {
        if (unitHitPointsRatio_ == null) {
          unitHitPointsRatio_ = new global::SC2APIProtocol.ImageData();
        }
        UnitHitPointsRatio.MergeFrom(other.UnitHitPointsRatio);
      }
      if (other.unitEnergy_ != null) {
        if (unitEnergy_ == null) {
          unitEnergy_ = new global::SC2APIProtocol.ImageData();
        }
        UnitEnergy.MergeFrom(other.UnitEnergy);
      }
      if (other.unitEnergyRatio_ != null) {
        if (unitEnergyRatio_ == null) {
          unitEnergyRatio_ = new global::SC2APIProtocol.ImageData();
        }
        UnitEnergyRatio.MergeFrom(other.UnitEnergyRatio);
      }
      if (other.unitShields_ != null) {
        if (unitShields_ == null) {
          unitShields_ = new global::SC2APIProtocol.ImageData();
        }
        UnitShields.MergeFrom(other.UnitShields);
      }
      if (other.unitShieldsRatio_ != null) {
        if (unitShieldsRatio_ == null) {
          unitShieldsRatio_ = new global::SC2APIProtocol.ImageData();
        }
        UnitShieldsRatio.MergeFrom(other.UnitShieldsRatio);
      }
      if (other.playerRelative_ != null) {
        if (playerRelative_ == null) {
          playerRelative_ = new global::SC2APIProtocol.ImageData();
        }
        PlayerRelative.MergeFrom(other.PlayerRelative);
      }
      if (other.unitDensityAa_ != null) {
        if (unitDensityAa_ == null) {
          unitDensityAa_ = new global::SC2APIProtocol.ImageData();
        }
        UnitDensityAa.MergeFrom(other.UnitDensityAa);
      }
      if (other.unitDensity_ != null) {
        if (unitDensity_ == null) {
          unitDensity_ = new global::SC2APIProtocol.ImageData();
        }
        UnitDensity.MergeFrom(other.UnitDensity);
      }
      if (other.effects_ != null) {
        if (effects_ == null) {
          effects_ = new global::SC2APIProtocol.ImageData();
        }
        Effects.MergeFrom(other.Effects);
      }
      if (other.hallucinations_ != null) {
        if (hallucinations_ == null) {
          hallucinations_ = new global::SC2APIProtocol.ImageData();
        }
        Hallucinations.MergeFrom(other.Hallucinations);
      }
      if (other.cloaked_ != null) {
        if (cloaked_ == null) {
          cloaked_ = new global::SC2APIProtocol.ImageData();
        }
        Cloaked.MergeFrom(other.Cloaked);
      }
      if (other.blip_ != null) {
        if (blip_ == null) {
          blip_ = new global::SC2APIProtocol.ImageData();
        }
        Blip.MergeFrom(other.Blip);
      }
      if (other.buffs_ != null) {
        if (buffs_ == null) {
          buffs_ = new global::SC2APIProtocol.ImageData();
        }
        Buffs.MergeFrom(other.Buffs);
      }
      if (other.active_ != null) {
        if (active_ == null) {
          active_ = new global::SC2APIProtocol.ImageData();
        }
        Active.MergeFrom(other.Active);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (heightMap_ == null) {
              heightMap_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(heightMap_);
            break;
          }
          case 18: {
            if (visibilityMap_ == null) {
              visibilityMap_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(visibilityMap_);
            break;
          }
          case 26: {
            if (creep_ == null) {
              creep_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(creep_);
            break;
          }
          case 34: {
            if (power_ == null) {
              power_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(power_);
            break;
          }
          case 42: {
            if (playerId_ == null) {
              playerId_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 50: {
            if (unitType_ == null) {
              unitType_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitType_);
            break;
          }
          case 58: {
            if (selected_ == null) {
              selected_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(selected_);
            break;
          }
          case 66: {
            if (unitHitPoints_ == null) {
              unitHitPoints_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitHitPoints_);
            break;
          }
          case 74: {
            if (unitEnergy_ == null) {
              unitEnergy_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitEnergy_);
            break;
          }
          case 82: {
            if (unitShields_ == null) {
              unitShields_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitShields_);
            break;
          }
          case 90: {
            if (playerRelative_ == null) {
              playerRelative_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(playerRelative_);
            break;
          }
          case 114: {
            if (unitDensityAa_ == null) {
              unitDensityAa_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitDensityAa_);
            break;
          }
          case 122: {
            if (unitDensity_ == null) {
              unitDensity_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitDensity_);
            break;
          }
          case 138: {
            if (unitHitPointsRatio_ == null) {
              unitHitPointsRatio_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitHitPointsRatio_);
            break;
          }
          case 146: {
            if (unitEnergyRatio_ == null) {
              unitEnergyRatio_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitEnergyRatio_);
            break;
          }
          case 154: {
            if (unitShieldsRatio_ == null) {
              unitShieldsRatio_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitShieldsRatio_);
            break;
          }
          case 162: {
            if (effects_ == null) {
              effects_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(effects_);
            break;
          }
          case 170: {
            if (hallucinations_ == null) {
              hallucinations_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(hallucinations_);
            break;
          }
          case 178: {
            if (cloaked_ == null) {
              cloaked_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(cloaked_);
            break;
          }
          case 186: {
            if (blip_ == null) {
              blip_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(blip_);
            break;
          }
          case 194: {
            if (buffs_ == null) {
              buffs_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(buffs_);
            break;
          }
          case 202: {
            if (active_ == null) {
              active_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(active_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeatureLayersMinimap : pb::IMessage<FeatureLayersMinimap> {
    private static readonly pb::MessageParser<FeatureLayersMinimap> _parser = new pb::MessageParser<FeatureLayersMinimap>(() => new FeatureLayersMinimap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureLayersMinimap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureLayersMinimap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureLayersMinimap(FeatureLayersMinimap other) : this() {
      HeightMap = other.heightMap_ != null ? other.HeightMap.Clone() : null;
      VisibilityMap = other.visibilityMap_ != null ? other.VisibilityMap.Clone() : null;
      Creep = other.creep_ != null ? other.Creep.Clone() : null;
      Camera = other.camera_ != null ? other.Camera.Clone() : null;
      PlayerId = other.playerId_ != null ? other.PlayerId.Clone() : null;
      PlayerRelative = other.playerRelative_ != null ? other.PlayerRelative.Clone() : null;
      Selected = other.selected_ != null ? other.Selected.Clone() : null;
      Alerts = other.alerts_ != null ? other.Alerts.Clone() : null;
      UnitType = other.unitType_ != null ? other.UnitType.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureLayersMinimap Clone() {
      return new FeatureLayersMinimap(this);
    }

    /// <summary>Field number for the "height_map" field.</summary>
    public const int HeightMapFieldNumber = 1;
    private global::SC2APIProtocol.ImageData heightMap_;
    /// <summary>
    /// uint8. Terrain height. World space units of [-200, 200] encoded into [0, 255].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData HeightMap {
      get { return heightMap_; }
      set {
        heightMap_ = value;
      }
    }

    /// <summary>Field number for the "visibility_map" field.</summary>
    public const int VisibilityMapFieldNumber = 2;
    private global::SC2APIProtocol.ImageData visibilityMap_;
    /// <summary>
    /// uint8. 0=Hidden, 1=Fogged, 2=Visible, 3=FullHidden
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData VisibilityMap {
      get { return visibilityMap_; }
      set {
        visibilityMap_ = value;
      }
    }

    /// <summary>Field number for the "creep" field.</summary>
    public const int CreepFieldNumber = 3;
    private global::SC2APIProtocol.ImageData creep_;
    /// <summary>
    /// 1-bit. Zerg creep.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Creep {
      get { return creep_; }
      set {
        creep_ = value;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 4;
    private global::SC2APIProtocol.ImageData camera_;
    /// <summary>
    /// 1-bit. Area covered by the camera.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private global::SC2APIProtocol.ImageData playerId_;
    /// <summary>
    /// uint8. Participants: [1, 15] Neutral: 16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_relative" field.</summary>
    public const int PlayerRelativeFieldNumber = 6;
    private global::SC2APIProtocol.ImageData playerRelative_;
    /// <summary>
    /// uint8. See "Alliance" enum in raw.proto. Range: [1, 4] 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData PlayerRelative {
      get { return playerRelative_; }
      set {
        playerRelative_ = value;
      }
    }

    /// <summary>Field number for the "selected" field.</summary>
    public const int SelectedFieldNumber = 7;
    private global::SC2APIProtocol.ImageData selected_;
    /// <summary>
    /// 1-bit. Selected units.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Selected {
      get { return selected_; }
      set {
        selected_ = value;
      }
    }

    /// <summary>Field number for the "alerts" field.</summary>
    public const int AlertsFieldNumber = 9;
    private global::SC2APIProtocol.ImageData alerts_;
    /// <summary>
    /// 1-bit. Shows 'UnitAttacked' alert location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Alerts {
      get { return alerts_; }
      set {
        alerts_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 8;
    private global::SC2APIProtocol.ImageData unitType_;
    /// <summary>
    /// Cheat layers. Only populated in replays.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureLayersMinimap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureLayersMinimap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HeightMap, other.HeightMap)) return false;
      if (!object.Equals(VisibilityMap, other.VisibilityMap)) return false;
      if (!object.Equals(Creep, other.Creep)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (!object.Equals(PlayerRelative, other.PlayerRelative)) return false;
      if (!object.Equals(Selected, other.Selected)) return false;
      if (!object.Equals(Alerts, other.Alerts)) return false;
      if (!object.Equals(UnitType, other.UnitType)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heightMap_ != null) hash ^= HeightMap.GetHashCode();
      if (visibilityMap_ != null) hash ^= VisibilityMap.GetHashCode();
      if (creep_ != null) hash ^= Creep.GetHashCode();
      if (camera_ != null) hash ^= Camera.GetHashCode();
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (playerRelative_ != null) hash ^= PlayerRelative.GetHashCode();
      if (selected_ != null) hash ^= Selected.GetHashCode();
      if (alerts_ != null) hash ^= Alerts.GetHashCode();
      if (unitType_ != null) hash ^= UnitType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heightMap_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HeightMap);
      }
      if (visibilityMap_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VisibilityMap);
      }
      if (creep_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Creep);
      }
      if (camera_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Camera);
      }
      if (playerId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerId);
      }
      if (playerRelative_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerRelative);
      }
      if (selected_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Selected);
      }
      if (unitType_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UnitType);
      }
      if (alerts_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Alerts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heightMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeightMap);
      }
      if (visibilityMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisibilityMap);
      }
      if (creep_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creep);
      }
      if (camera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (playerRelative_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerRelative);
      }
      if (selected_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selected);
      }
      if (alerts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alerts);
      }
      if (unitType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureLayersMinimap other) {
      if (other == null) {
        return;
      }
      if (other.heightMap_ != null) {
        if (heightMap_ == null) {
          heightMap_ = new global::SC2APIProtocol.ImageData();
        }
        HeightMap.MergeFrom(other.HeightMap);
      }
      if (other.visibilityMap_ != null) {
        if (visibilityMap_ == null) {
          visibilityMap_ = new global::SC2APIProtocol.ImageData();
        }
        VisibilityMap.MergeFrom(other.VisibilityMap);
      }
      if (other.creep_ != null) {
        if (creep_ == null) {
          creep_ = new global::SC2APIProtocol.ImageData();
        }
        Creep.MergeFrom(other.Creep);
      }
      if (other.camera_ != null) {
        if (camera_ == null) {
          camera_ = new global::SC2APIProtocol.ImageData();
        }
        Camera.MergeFrom(other.Camera);
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          playerId_ = new global::SC2APIProtocol.ImageData();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.playerRelative_ != null) {
        if (playerRelative_ == null) {
          playerRelative_ = new global::SC2APIProtocol.ImageData();
        }
        PlayerRelative.MergeFrom(other.PlayerRelative);
      }
      if (other.selected_ != null) {
        if (selected_ == null) {
          selected_ = new global::SC2APIProtocol.ImageData();
        }
        Selected.MergeFrom(other.Selected);
      }
      if (other.alerts_ != null) {
        if (alerts_ == null) {
          alerts_ = new global::SC2APIProtocol.ImageData();
        }
        Alerts.MergeFrom(other.Alerts);
      }
      if (other.unitType_ != null) {
        if (unitType_ == null) {
          unitType_ = new global::SC2APIProtocol.ImageData();
        }
        UnitType.MergeFrom(other.UnitType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (heightMap_ == null) {
              heightMap_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(heightMap_);
            break;
          }
          case 18: {
            if (visibilityMap_ == null) {
              visibilityMap_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(visibilityMap_);
            break;
          }
          case 26: {
            if (creep_ == null) {
              creep_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(creep_);
            break;
          }
          case 34: {
            if (camera_ == null) {
              camera_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(camera_);
            break;
          }
          case 42: {
            if (playerId_ == null) {
              playerId_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 50: {
            if (playerRelative_ == null) {
              playerRelative_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(playerRelative_);
            break;
          }
          case 58: {
            if (selected_ == null) {
              selected_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(selected_);
            break;
          }
          case 66: {
            if (unitType_ == null) {
              unitType_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(unitType_);
            break;
          }
          case 74: {
            if (alerts_ == null) {
              alerts_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(alerts_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObservationRender : pb::IMessage<ObservationRender> {
    private static readonly pb::MessageParser<ObservationRender> _parser = new pb::MessageParser<ObservationRender>(() => new ObservationRender());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObservationRender> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRender() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRender(ObservationRender other) : this() {
      Map = other.map_ != null ? other.Map.Clone() : null;
      Minimap = other.minimap_ != null ? other.Minimap.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRender Clone() {
      return new ObservationRender(this);
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private global::SC2APIProtocol.ImageData map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "minimap" field.</summary>
    public const int MinimapFieldNumber = 2;
    private global::SC2APIProtocol.ImageData minimap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Minimap {
      get { return minimap_; }
      set {
        minimap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObservationRender);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObservationRender other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Minimap, other.Minimap)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_ != null) hash ^= Map.GetHashCode();
      if (minimap_ != null) hash ^= Minimap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Map);
      }
      if (minimap_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Minimap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (minimap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Minimap);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObservationRender other) {
      if (other == null) {
        return;
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::SC2APIProtocol.ImageData();
        }
        Map.MergeFrom(other.Map);
      }
      if (other.minimap_ != null) {
        if (minimap_ == null) {
          minimap_ = new global::SC2APIProtocol.ImageData();
        }
        Minimap.MergeFrom(other.Minimap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (map_ == null) {
              map_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(map_);
            break;
          }
          case 18: {
            if (minimap_ == null) {
              minimap_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(minimap_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionSpatial : pb::IMessage<ActionSpatial> {
    private static readonly pb::MessageParser<ActionSpatial> _parser = new pb::MessageParser<ActionSpatial>(() => new ActionSpatial());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionSpatial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatial(ActionSpatial other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.UnitCommand:
          UnitCommand = other.UnitCommand.Clone();
          break;
        case ActionOneofCase.CameraMove:
          CameraMove = other.CameraMove.Clone();
          break;
        case ActionOneofCase.UnitSelectionPoint:
          UnitSelectionPoint = other.UnitSelectionPoint.Clone();
          break;
        case ActionOneofCase.UnitSelectionRect:
          UnitSelectionRect = other.UnitSelectionRect.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatial Clone() {
      return new ActionSpatial(this);
    }

    /// <summary>Field number for the "unit_command" field.</summary>
    public const int UnitCommandFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionSpatialUnitCommand UnitCommand {
      get { return actionCase_ == ActionOneofCase.UnitCommand ? (global::SC2APIProtocol.ActionSpatialUnitCommand) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitCommand;
      }
    }

    /// <summary>Field number for the "camera_move" field.</summary>
    public const int CameraMoveFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionSpatialCameraMove CameraMove {
      get { return actionCase_ == ActionOneofCase.CameraMove ? (global::SC2APIProtocol.ActionSpatialCameraMove) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CameraMove;
      }
    }

    /// <summary>Field number for the "unit_selection_point" field.</summary>
    public const int UnitSelectionPointFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionSpatialUnitSelectionPoint UnitSelectionPoint {
      get { return actionCase_ == ActionOneofCase.UnitSelectionPoint ? (global::SC2APIProtocol.ActionSpatialUnitSelectionPoint) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitSelectionPoint;
      }
    }

    /// <summary>Field number for the "unit_selection_rect" field.</summary>
    public const int UnitSelectionRectFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionSpatialUnitSelectionRect UnitSelectionRect {
      get { return actionCase_ == ActionOneofCase.UnitSelectionRect ? (global::SC2APIProtocol.ActionSpatialUnitSelectionRect) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitSelectionRect;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      UnitCommand = 1,
      CameraMove = 2,
      UnitSelectionPoint = 3,
      UnitSelectionRect = 4,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionSpatial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionSpatial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnitCommand, other.UnitCommand)) return false;
      if (!object.Equals(CameraMove, other.CameraMove)) return false;
      if (!object.Equals(UnitSelectionPoint, other.UnitSelectionPoint)) return false;
      if (!object.Equals(UnitSelectionRect, other.UnitSelectionRect)) return false;
      if (ActionCase != other.ActionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.UnitCommand) hash ^= UnitCommand.GetHashCode();
      if (actionCase_ == ActionOneofCase.CameraMove) hash ^= CameraMove.GetHashCode();
      if (actionCase_ == ActionOneofCase.UnitSelectionPoint) hash ^= UnitSelectionPoint.GetHashCode();
      if (actionCase_ == ActionOneofCase.UnitSelectionRect) hash ^= UnitSelectionRect.GetHashCode();
      hash ^= (int) actionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionCase_ == ActionOneofCase.UnitCommand) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitCommand);
      }
      if (actionCase_ == ActionOneofCase.CameraMove) {
        output.WriteRawTag(18);
        output.WriteMessage(CameraMove);
      }
      if (actionCase_ == ActionOneofCase.UnitSelectionPoint) {
        output.WriteRawTag(26);
        output.WriteMessage(UnitSelectionPoint);
      }
      if (actionCase_ == ActionOneofCase.UnitSelectionRect) {
        output.WriteRawTag(34);
        output.WriteMessage(UnitSelectionRect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.UnitCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitCommand);
      }
      if (actionCase_ == ActionOneofCase.CameraMove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraMove);
      }
      if (actionCase_ == ActionOneofCase.UnitSelectionPoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitSelectionPoint);
      }
      if (actionCase_ == ActionOneofCase.UnitSelectionRect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitSelectionRect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionSpatial other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.UnitCommand:
          UnitCommand = other.UnitCommand;
          break;
        case ActionOneofCase.CameraMove:
          CameraMove = other.CameraMove;
          break;
        case ActionOneofCase.UnitSelectionPoint:
          UnitSelectionPoint = other.UnitSelectionPoint;
          break;
        case ActionOneofCase.UnitSelectionRect:
          UnitSelectionRect = other.UnitSelectionRect;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::SC2APIProtocol.ActionSpatialUnitCommand subBuilder = new global::SC2APIProtocol.ActionSpatialUnitCommand();
            if (actionCase_ == ActionOneofCase.UnitCommand) {
              subBuilder.MergeFrom(UnitCommand);
            }
            input.ReadMessage(subBuilder);
            UnitCommand = subBuilder;
            break;
          }
          case 18: {
            global::SC2APIProtocol.ActionSpatialCameraMove subBuilder = new global::SC2APIProtocol.ActionSpatialCameraMove();
            if (actionCase_ == ActionOneofCase.CameraMove) {
              subBuilder.MergeFrom(CameraMove);
            }
            input.ReadMessage(subBuilder);
            CameraMove = subBuilder;
            break;
          }
          case 26: {
            global::SC2APIProtocol.ActionSpatialUnitSelectionPoint subBuilder = new global::SC2APIProtocol.ActionSpatialUnitSelectionPoint();
            if (actionCase_ == ActionOneofCase.UnitSelectionPoint) {
              subBuilder.MergeFrom(UnitSelectionPoint);
            }
            input.ReadMessage(subBuilder);
            UnitSelectionPoint = subBuilder;
            break;
          }
          case 34: {
            global::SC2APIProtocol.ActionSpatialUnitSelectionRect subBuilder = new global::SC2APIProtocol.ActionSpatialUnitSelectionRect();
            if (actionCase_ == ActionOneofCase.UnitSelectionRect) {
              subBuilder.MergeFrom(UnitSelectionRect);
            }
            input.ReadMessage(subBuilder);
            UnitSelectionRect = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionSpatialUnitCommand : pb::IMessage<ActionSpatialUnitCommand> {
    private static readonly pb::MessageParser<ActionSpatialUnitCommand> _parser = new pb::MessageParser<ActionSpatialUnitCommand>(() => new ActionSpatialUnitCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionSpatialUnitCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitCommand(ActionSpatialUnitCommand other) : this() {
      abilityId_ = other.abilityId_;
      queueCommand_ = other.queueCommand_;
      switch (other.TargetCase) {
        case TargetOneofCase.TargetScreenCoord:
          TargetScreenCoord = other.TargetScreenCoord.Clone();
          break;
        case TargetOneofCase.TargetMinimapCoord:
          TargetMinimapCoord = other.TargetMinimapCoord.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitCommand Clone() {
      return new ActionSpatialUnitCommand(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "target_screen_coord" field.</summary>
    public const int TargetScreenCoordFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.PointI TargetScreenCoord {
      get { return targetCase_ == TargetOneofCase.TargetScreenCoord ? (global::SC2APIProtocol.PointI) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetScreenCoord;
      }
    }

    /// <summary>Field number for the "target_minimap_coord" field.</summary>
    public const int TargetMinimapCoordFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.PointI TargetMinimapCoord {
      get { return targetCase_ == TargetOneofCase.TargetMinimapCoord ? (global::SC2APIProtocol.PointI) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetMinimapCoord;
      }
    }

    /// <summary>Field number for the "queue_command" field.</summary>
    public const int QueueCommandFieldNumber = 4;
    private bool queueCommand_;
    /// <summary>
    /// Equivalent to shift+command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueueCommand {
      get { return queueCommand_; }
      set {
        queueCommand_ = value;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      TargetScreenCoord = 2,
      TargetMinimapCoord = 3,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionSpatialUnitCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionSpatialUnitCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (!object.Equals(TargetScreenCoord, other.TargetScreenCoord)) return false;
      if (!object.Equals(TargetMinimapCoord, other.TargetMinimapCoord)) return false;
      if (QueueCommand != other.QueueCommand) return false;
      if (TargetCase != other.TargetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetScreenCoord) hash ^= TargetScreenCoord.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetMinimapCoord) hash ^= TargetMinimapCoord.GetHashCode();
      if (QueueCommand != false) hash ^= QueueCommand.GetHashCode();
      hash ^= (int) targetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (targetCase_ == TargetOneofCase.TargetScreenCoord) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetScreenCoord);
      }
      if (targetCase_ == TargetOneofCase.TargetMinimapCoord) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetMinimapCoord);
      }
      if (QueueCommand != false) {
        output.WriteRawTag(32);
        output.WriteBool(QueueCommand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (targetCase_ == TargetOneofCase.TargetScreenCoord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetScreenCoord);
      }
      if (targetCase_ == TargetOneofCase.TargetMinimapCoord) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetMinimapCoord);
      }
      if (QueueCommand != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionSpatialUnitCommand other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.QueueCommand != false) {
        QueueCommand = other.QueueCommand;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.TargetScreenCoord:
          TargetScreenCoord = other.TargetScreenCoord;
          break;
        case TargetOneofCase.TargetMinimapCoord:
          TargetMinimapCoord = other.TargetMinimapCoord;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 18: {
            global::SC2APIProtocol.PointI subBuilder = new global::SC2APIProtocol.PointI();
            if (targetCase_ == TargetOneofCase.TargetScreenCoord) {
              subBuilder.MergeFrom(TargetScreenCoord);
            }
            input.ReadMessage(subBuilder);
            TargetScreenCoord = subBuilder;
            break;
          }
          case 26: {
            global::SC2APIProtocol.PointI subBuilder = new global::SC2APIProtocol.PointI();
            if (targetCase_ == TargetOneofCase.TargetMinimapCoord) {
              subBuilder.MergeFrom(TargetMinimapCoord);
            }
            input.ReadMessage(subBuilder);
            TargetMinimapCoord = subBuilder;
            break;
          }
          case 32: {
            QueueCommand = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionSpatialCameraMove : pb::IMessage<ActionSpatialCameraMove> {
    private static readonly pb::MessageParser<ActionSpatialCameraMove> _parser = new pb::MessageParser<ActionSpatialCameraMove>(() => new ActionSpatialCameraMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionSpatialCameraMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialCameraMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialCameraMove(ActionSpatialCameraMove other) : this() {
      CenterMinimap = other.centerMinimap_ != null ? other.CenterMinimap.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialCameraMove Clone() {
      return new ActionSpatialCameraMove(this);
    }

    /// <summary>Field number for the "center_minimap" field.</summary>
    public const int CenterMinimapFieldNumber = 1;
    private global::SC2APIProtocol.PointI centerMinimap_;
    /// <summary>
    /// Simulates a click on the minimap to move the camera.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.PointI CenterMinimap {
      get { return centerMinimap_; }
      set {
        centerMinimap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionSpatialCameraMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionSpatialCameraMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CenterMinimap, other.CenterMinimap)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (centerMinimap_ != null) hash ^= CenterMinimap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (centerMinimap_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CenterMinimap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (centerMinimap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterMinimap);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionSpatialCameraMove other) {
      if (other == null) {
        return;
      }
      if (other.centerMinimap_ != null) {
        if (centerMinimap_ == null) {
          centerMinimap_ = new global::SC2APIProtocol.PointI();
        }
        CenterMinimap.MergeFrom(other.CenterMinimap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (centerMinimap_ == null) {
              centerMinimap_ = new global::SC2APIProtocol.PointI();
            }
            input.ReadMessage(centerMinimap_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionSpatialUnitSelectionPoint : pb::IMessage<ActionSpatialUnitSelectionPoint> {
    private static readonly pb::MessageParser<ActionSpatialUnitSelectionPoint> _parser = new pb::MessageParser<ActionSpatialUnitSelectionPoint>(() => new ActionSpatialUnitSelectionPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionSpatialUnitSelectionPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitSelectionPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitSelectionPoint(ActionSpatialUnitSelectionPoint other) : this() {
      SelectionScreenCoord = other.selectionScreenCoord_ != null ? other.SelectionScreenCoord.Clone() : null;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitSelectionPoint Clone() {
      return new ActionSpatialUnitSelectionPoint(this);
    }

    /// <summary>Field number for the "selection_screen_coord" field.</summary>
    public const int SelectionScreenCoordFieldNumber = 1;
    private global::SC2APIProtocol.PointI selectionScreenCoord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.PointI SelectionScreenCoord {
      get { return selectionScreenCoord_; }
      set {
        selectionScreenCoord_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionSpatialUnitSelectionPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionSpatialUnitSelectionPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SelectionScreenCoord, other.SelectionScreenCoord)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selectionScreenCoord_ != null) hash ^= SelectionScreenCoord.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selectionScreenCoord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelectionScreenCoord);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selectionScreenCoord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectionScreenCoord);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionSpatialUnitSelectionPoint other) {
      if (other == null) {
        return;
      }
      if (other.selectionScreenCoord_ != null) {
        if (selectionScreenCoord_ == null) {
          selectionScreenCoord_ = new global::SC2APIProtocol.PointI();
        }
        SelectionScreenCoord.MergeFrom(other.SelectionScreenCoord);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selectionScreenCoord_ == null) {
              selectionScreenCoord_ = new global::SC2APIProtocol.PointI();
            }
            input.ReadMessage(selectionScreenCoord_);
            break;
          }
          case 16: {
            type_ = (global::SC2APIProtocol.ActionSpatialUnitSelectionPoint.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ActionSpatialUnitSelectionPoint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Type_UNSET")] Unset = 0,
        /// <summary>
        /// Equivalent to normal click. Changes selection to unit.
        /// </summary>
        [pbr::OriginalName("Select")] Select = 1,
        /// <summary>
        /// Equivalent to shift+click. Toggle selection of unit.
        /// </summary>
        [pbr::OriginalName("Toggle")] Toggle = 2,
        /// <summary>
        /// Equivalent to control+click. Selects all units of a given type.
        /// </summary>
        [pbr::OriginalName("AllType")] AllType = 3,
        /// <summary>
        /// Equivalent to shift+control+click. Selects all units of a given type.
        /// </summary>
        [pbr::OriginalName("AddAllType")] AddAllType = 4,
      }

    }
    #endregion

  }

  public sealed partial class ActionSpatialUnitSelectionRect : pb::IMessage<ActionSpatialUnitSelectionRect> {
    private static readonly pb::MessageParser<ActionSpatialUnitSelectionRect> _parser = new pb::MessageParser<ActionSpatialUnitSelectionRect>(() => new ActionSpatialUnitSelectionRect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionSpatialUnitSelectionRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.SpatialReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitSelectionRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitSelectionRect(ActionSpatialUnitSelectionRect other) : this() {
      selectionScreenCoord_ = other.selectionScreenCoord_.Clone();
      selectionAdd_ = other.selectionAdd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionSpatialUnitSelectionRect Clone() {
      return new ActionSpatialUnitSelectionRect(this);
    }

    /// <summary>Field number for the "selection_screen_coord" field.</summary>
    public const int SelectionScreenCoordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.RectangleI> _repeated_selectionScreenCoord_codec
        = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.RectangleI.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.RectangleI> selectionScreenCoord_ = new pbc::RepeatedField<global::SC2APIProtocol.RectangleI>();
    /// <summary>
    /// Eventually this should not be an array, but a single field (multiple would be cheating).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.RectangleI> SelectionScreenCoord {
      get { return selectionScreenCoord_; }
    }

    /// <summary>Field number for the "selection_add" field.</summary>
    public const int SelectionAddFieldNumber = 2;
    private bool selectionAdd_;
    /// <summary>
    /// Equivalent to shift+drag. Adds units to selection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelectionAdd {
      get { return selectionAdd_; }
      set {
        selectionAdd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionSpatialUnitSelectionRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionSpatialUnitSelectionRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!selectionScreenCoord_.Equals(other.selectionScreenCoord_)) return false;
      if (SelectionAdd != other.SelectionAdd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= selectionScreenCoord_.GetHashCode();
      if (SelectionAdd != false) hash ^= SelectionAdd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      selectionScreenCoord_.WriteTo(output, _repeated_selectionScreenCoord_codec);
      if (SelectionAdd != false) {
        output.WriteRawTag(16);
        output.WriteBool(SelectionAdd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += selectionScreenCoord_.CalculateSize(_repeated_selectionScreenCoord_codec);
      if (SelectionAdd != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionSpatialUnitSelectionRect other) {
      if (other == null) {
        return;
      }
      selectionScreenCoord_.Add(other.selectionScreenCoord_);
      if (other.SelectionAdd != false) {
        SelectionAdd = other.SelectionAdd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            selectionScreenCoord_.AddEntriesFrom(input, _repeated_selectionScreenCoord_codec);
            break;
          }
          case 16: {
            SelectionAdd = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
