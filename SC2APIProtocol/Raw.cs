// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/raw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol {

  /// <summary>Holder for reflection information generated from s2clientprotocol/raw.proto</summary>
  public static partial class RawReflection {

    #region Descriptor
    /// <summary>File descriptor for s2clientprotocol/raw.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RawReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpzMmNsaWVudHByb3RvY29sL3Jhdy5wcm90bxIOU0MyQVBJUHJvdG9jb2wa",
            "HXMyY2xpZW50cHJvdG9jb2wvY29tbW9uLnByb3RvIrECCghTdGFydFJhdxIp",
            "CghtYXBfc2l6ZRgBIAEoCzIXLlNDMkFQSVByb3RvY29sLlNpemUyREkSLwoM",
            "cGF0aGluZ19ncmlkGAIgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1hZ2VEYXRh",
            "EjEKDnRlcnJhaW5faGVpZ2h0GAMgASgLMhkuU0MyQVBJUHJvdG9jb2wuSW1h",
            "Z2VEYXRhEjEKDnBsYWNlbWVudF9ncmlkGAQgASgLMhkuU0MyQVBJUHJvdG9j",
            "b2wuSW1hZ2VEYXRhEjEKDXBsYXlhYmxlX2FyZWEYBSABKAsyGi5TQzJBUElQ",
            "cm90b2NvbC5SZWN0YW5nbGVJEjAKD3N0YXJ0X2xvY2F0aW9ucxgGIAMoCzIX",
            "LlNDMkFQSVByb3RvY29sLlBvaW50MkQi3AEKDk9ic2VydmF0aW9uUmF3EikK",
            "BnBsYXllchgBIAEoCzIZLlNDMkFQSVByb3RvY29sLlBsYXllclJhdxIjCgV1",
            "bml0cxgCIAMoCzIULlNDMkFQSVByb3RvY29sLlVuaXQSKwoJbWFwX3N0YXRl",
            "GAMgASgLMhguU0MyQVBJUHJvdG9jb2wuTWFwU3RhdGUSJAoFZXZlbnQYBCAB",
            "KAsyFS5TQzJBUElQcm90b2NvbC5FdmVudBInCgdlZmZlY3RzGAUgAygLMhYu",
            "U0MyQVBJUHJvdG9jb2wuRWZmZWN0Ik4KC1Bvd2VyU291cmNlEiIKA3BvcxgB",
            "IAEoCzIVLlNDMkFQSVByb3RvY29sLlBvaW50Eg4KBnJhZGl1cxgCIAEoAhIL",
            "CgN0YWcYAyABKAQiewoJUGxheWVyUmF3EjIKDXBvd2VyX3NvdXJjZXMYASAD",
            "KAsyGy5TQzJBUElQcm90b2NvbC5Qb3dlclNvdXJjZRIlCgZjYW1lcmEYAiAB",
            "KAsyFS5TQzJBUElQcm90b2NvbC5Qb2ludBITCgt1cGdyYWRlX2lkcxgDIAMo",
            "DSKPAQoJVW5pdE9yZGVyEhIKCmFiaWxpdHlfaWQYASABKA0SNwoWdGFyZ2V0",
            "X3dvcmxkX3NwYWNlX3BvcxgCIAEoCzIVLlNDMkFQSVByb3RvY29sLlBvaW50",
            "SAASGQoPdGFyZ2V0X3VuaXRfdGFnGAMgASgESAASEAoIcHJvZ3Jlc3MYBCAB",
            "KAJCCAoGdGFyZ2V0IpsBCg1QYXNzZW5nZXJVbml0EgsKA3RhZxgBIAEoBBIO",
            "CgZoZWFsdGgYAiABKAISEgoKaGVhbHRoX21heBgDIAEoAhIOCgZzaGllbGQY",
            "BCABKAISEgoKc2hpZWxkX21heBgHIAEoAhIOCgZlbmVyZ3kYBSABKAISEgoK",
            "ZW5lcmd5X21heBgIIAEoAhIRCgl1bml0X3R5cGUYBiABKA0irwcKBFVuaXQS",
            "MQoMZGlzcGxheV90eXBlGAEgASgOMhsuU0MyQVBJUHJvdG9jb2wuRGlzcGxh",
            "eVR5cGUSKgoIYWxsaWFuY2UYAiABKA4yGC5TQzJBUElQcm90b2NvbC5BbGxp",
            "YW5jZRILCgN0YWcYAyABKAQSEQoJdW5pdF90eXBlGAQgASgNEg0KBW93bmVy",
            "GAUgASgFEiIKA3BvcxgGIAEoCzIVLlNDMkFQSVByb3RvY29sLlBvaW50Eg4K",
            "BmZhY2luZxgHIAEoAhIOCgZyYWRpdXMYCCABKAISFgoOYnVpbGRfcHJvZ3Jl",
            "c3MYCSABKAISKQoFY2xvYWsYCiABKA4yGi5TQzJBUElQcm90b2NvbC5DbG9h",
            "a1N0YXRlEhAKCGJ1ZmZfaWRzGBsgAygNEhQKDGRldGVjdF9yYW5nZRgfIAEo",
            "AhITCgtyYWRhcl9yYW5nZRggIAEoAhITCgtpc19zZWxlY3RlZBgLIAEoCBIU",
            "Cgxpc19vbl9zY3JlZW4YDCABKAgSDwoHaXNfYmxpcBgNIAEoCBISCgppc19w",
            "b3dlcmVkGCMgASgIEhEKCWlzX2FjdGl2ZRgnIAEoCBIOCgZoZWFsdGgYDiAB",
            "KAISEgoKaGVhbHRoX21heBgPIAEoAhIOCgZzaGllbGQYECABKAISEgoKc2hp",
            "ZWxkX21heBgkIAEoAhIOCgZlbmVyZ3kYESABKAISEgoKZW5lcmd5X21heBgl",
            "IAEoAhIYChBtaW5lcmFsX2NvbnRlbnRzGBIgASgFEhgKEHZlc3BlbmVfY29u",
            "dGVudHMYEyABKAUSEQoJaXNfZmx5aW5nGBQgASgIEhMKC2lzX2J1cnJvd2Vk",
            "GBUgASgIEhgKEGlzX2hhbGx1Y2luYXRpb24YJiABKAgSKQoGb3JkZXJzGBYg",
            "AygLMhkuU0MyQVBJUHJvdG9jb2wuVW5pdE9yZGVyEhIKCmFkZF9vbl90YWcY",
            "FyABKAQSMQoKcGFzc2VuZ2VycxgYIAMoCzIdLlNDMkFQSVByb3RvY29sLlBh",
            "c3NlbmdlclVuaXQSGQoRY2FyZ29fc3BhY2VfdGFrZW4YGSABKAUSFwoPY2Fy",
            "Z29fc3BhY2VfbWF4GBogASgFEhsKE2Fzc2lnbmVkX2hhcnZlc3RlcnMYHCAB",
            "KAUSGAoQaWRlYWxfaGFydmVzdGVycxgdIAEoBRIXCg93ZWFwb25fY29vbGRv",
            "d24YHiABKAISGgoSZW5nYWdlZF90YXJnZXRfdGFnGCIgASgEImMKCE1hcFN0",
            "YXRlEi0KCnZpc2liaWxpdHkYASABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFn",
            "ZURhdGESKAoFY3JlZXAYAiABKAsyGS5TQzJBUElQcm90b2NvbC5JbWFnZURh",
            "dGEiGwoFRXZlbnQSEgoKZGVhZF91bml0cxgBIAMoBCKMAQoGRWZmZWN0EhEK",
            "CWVmZmVjdF9pZBgBIAEoDRIkCgNwb3MYAiADKAsyFy5TQzJBUElQcm90b2Nv",
            "bC5Qb2ludDJEEioKCGFsbGlhbmNlGAMgASgOMhguU0MyQVBJUHJvdG9jb2wu",
            "QWxsaWFuY2USDQoFb3duZXIYBCABKAUSDgoGcmFkaXVzGAUgASgCItMBCglB",
            "Y3Rpb25SYXcSPAoMdW5pdF9jb21tYW5kGAEgASgLMiQuU0MyQVBJUHJvdG9j",
            "b2wuQWN0aW9uUmF3VW5pdENvbW1hbmRIABI6CgtjYW1lcmFfbW92ZRgCIAEo",
            "CzIjLlNDMkFQSVByb3RvY29sLkFjdGlvblJhd0NhbWVyYU1vdmVIABJCCg90",
            "b2dnbGVfYXV0b2Nhc3QYAyABKAsyJy5TQzJBUElQcm90b2NvbC5BY3Rpb25S",
            "YXdUb2dnbGVBdXRvY2FzdEgAQggKBmFjdGlvbiK0AQoUQWN0aW9uUmF3VW5p",
            "dENvbW1hbmQSEgoKYWJpbGl0eV9pZBgBIAEoBRI5ChZ0YXJnZXRfd29ybGRf",
            "c3BhY2VfcG9zGAIgASgLMhcuU0MyQVBJUHJvdG9jb2wuUG9pbnQyREgAEhkK",
            "D3RhcmdldF91bml0X3RhZxgDIAEoBEgAEhEKCXVuaXRfdGFncxgEIAMoBBIV",
            "Cg1xdWV1ZV9jb21tYW5kGAUgASgIQggKBnRhcmdldCJIChNBY3Rpb25SYXdD",
            "YW1lcmFNb3ZlEjEKEmNlbnRlcl93b3JsZF9zcGFjZRgBIAEoCzIVLlNDMkFQ",
            "SVByb3RvY29sLlBvaW50IkAKF0FjdGlvblJhd1RvZ2dsZUF1dG9jYXN0EhIK",
            "CmFiaWxpdHlfaWQYASABKAUSEQoJdW5pdF90YWdzGAIgAygEKksKC0Rpc3Bs",
            "YXlUeXBlEhUKEURpc3BsYXlUeXBlX1VOU0VUEAASCwoHVmlzaWJsZRABEgwK",
            "CFNuYXBzaG90EAISCgoGSGlkZGVuEAMqSgoIQWxsaWFuY2USEgoOQWxsaWFu",
            "Y2VfVU5TRVQQABIICgRTZWxmEAESCAoEQWxseRACEgsKB05ldXRyYWwQAxIJ",
            "CgVFbmVteRAEKmUKCkNsb2FrU3RhdGUSEgoOQ2xvYWtlZFVua25vd24QABIL",
            "CgdDbG9ha2VkEAESEwoPQ2xvYWtlZERldGVjdGVkEAISDgoKTm90Q2xvYWtl",
            "ZBADEhEKDUNsb2FrZWRBbGxpZWQQBGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SC2APIProtocol.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SC2APIProtocol.DisplayType), typeof(global::SC2APIProtocol.Alliance), typeof(global::SC2APIProtocol.CloakState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.StartRaw), global::SC2APIProtocol.StartRaw.Parser, new[]{ "MapSize", "PathingGrid", "TerrainHeight", "PlacementGrid", "PlayableArea", "StartLocations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ObservationRaw), global::SC2APIProtocol.ObservationRaw.Parser, new[]{ "Player", "Units", "MapState", "Event", "Effects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PowerSource), global::SC2APIProtocol.PowerSource.Parser, new[]{ "Pos", "Radius", "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PlayerRaw), global::SC2APIProtocol.PlayerRaw.Parser, new[]{ "PowerSources", "Camera", "UpgradeIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.UnitOrder), global::SC2APIProtocol.UnitOrder.Parser, new[]{ "AbilityId", "TargetWorldSpacePos", "TargetUnitTag", "Progress" }, new[]{ "Target" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.PassengerUnit), global::SC2APIProtocol.PassengerUnit.Parser, new[]{ "Tag", "Health", "HealthMax", "Shield", "ShieldMax", "Energy", "EnergyMax", "UnitType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Unit), global::SC2APIProtocol.Unit.Parser, new[]{ "DisplayType", "Alliance", "Tag", "UnitType", "Owner", "Pos", "Facing", "Radius", "BuildProgress", "Cloak", "BuffIds", "DetectRange", "RadarRange", "IsSelected", "IsOnScreen", "IsBlip", "IsPowered", "IsActive", "Health", "HealthMax", "Shield", "ShieldMax", "Energy", "EnergyMax", "MineralContents", "VespeneContents", "IsFlying", "IsBurrowed", "IsHallucination", "Orders", "AddOnTag", "Passengers", "CargoSpaceTaken", "CargoSpaceMax", "AssignedHarvesters", "IdealHarvesters", "WeaponCooldown", "EngagedTargetTag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.MapState), global::SC2APIProtocol.MapState.Parser, new[]{ "Visibility", "Creep" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Event), global::SC2APIProtocol.Event.Parser, new[]{ "DeadUnits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Effect), global::SC2APIProtocol.Effect.Parser, new[]{ "EffectId", "Pos", "Alliance", "Owner", "Radius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionRaw), global::SC2APIProtocol.ActionRaw.Parser, new[]{ "UnitCommand", "CameraMove", "ToggleAutocast" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionRawUnitCommand), global::SC2APIProtocol.ActionRawUnitCommand.Parser, new[]{ "AbilityId", "TargetWorldSpacePos", "TargetUnitTag", "UnitTags", "QueueCommand" }, new[]{ "Target" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionRawCameraMove), global::SC2APIProtocol.ActionRawCameraMove.Parser, new[]{ "CenterWorldSpace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ActionRawToggleAutocast), global::SC2APIProtocol.ActionRawToggleAutocast.Parser, new[]{ "AbilityId", "UnitTags" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DisplayType {
    [pbr::OriginalName("DisplayType_UNSET")] Unset = 0,
    /// <summary>
    /// Fully visible
    /// </summary>
    [pbr::OriginalName("Visible")] Visible = 1,
    /// <summary>
    /// Dimmed version of unit left behind after entering fog of war
    /// </summary>
    [pbr::OriginalName("Snapshot")] Snapshot = 2,
    /// <summary>
    /// Fully hidden
    /// </summary>
    [pbr::OriginalName("Hidden")] Hidden = 3,
  }

  public enum Alliance {
    [pbr::OriginalName("Alliance_UNSET")] Unset = 0,
    [pbr::OriginalName("Self")] Self = 1,
    [pbr::OriginalName("Ally")] Ally = 2,
    [pbr::OriginalName("Neutral")] Neutral = 3,
    [pbr::OriginalName("Enemy")] Enemy = 4,
  }

  public enum CloakState {
    /// <summary>
    /// Under the fog, so unknown whether it's cloaked or not.
    /// </summary>
    [pbr::OriginalName("CloakedUnknown")] CloakedUnknown = 0,
    [pbr::OriginalName("Cloaked")] Cloaked = 1,
    [pbr::OriginalName("CloakedDetected")] CloakedDetected = 2,
    [pbr::OriginalName("NotCloaked")] NotCloaked = 3,
    [pbr::OriginalName("CloakedAllied")] CloakedAllied = 4,
  }

  #endregion

  #region Messages
  public sealed partial class StartRaw : pb::IMessage<StartRaw> {
    private static readonly pb::MessageParser<StartRaw> _parser = new pb::MessageParser<StartRaw>(() => new StartRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRaw(StartRaw other) : this() {
      MapSize = other.mapSize_ != null ? other.MapSize.Clone() : null;
      PathingGrid = other.pathingGrid_ != null ? other.PathingGrid.Clone() : null;
      TerrainHeight = other.terrainHeight_ != null ? other.TerrainHeight.Clone() : null;
      PlacementGrid = other.placementGrid_ != null ? other.PlacementGrid.Clone() : null;
      PlayableArea = other.playableArea_ != null ? other.PlayableArea.Clone() : null;
      startLocations_ = other.startLocations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartRaw Clone() {
      return new StartRaw(this);
    }

    /// <summary>Field number for the "map_size" field.</summary>
    public const int MapSizeFieldNumber = 1;
    private global::SC2APIProtocol.Size2DI mapSize_;
    /// <summary>
    /// Width and height of the map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Size2DI MapSize {
      get { return mapSize_; }
      set {
        mapSize_ = value;
      }
    }

    /// <summary>Field number for the "pathing_grid" field.</summary>
    public const int PathingGridFieldNumber = 2;
    private global::SC2APIProtocol.ImageData pathingGrid_;
    /// <summary>
    /// 1 byte bitmap of the pathing grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData PathingGrid {
      get { return pathingGrid_; }
      set {
        pathingGrid_ = value;
      }
    }

    /// <summary>Field number for the "terrain_height" field.</summary>
    public const int TerrainHeightFieldNumber = 3;
    private global::SC2APIProtocol.ImageData terrainHeight_;
    /// <summary>
    /// 1 byte bitmap of the terrain height.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData TerrainHeight {
      get { return terrainHeight_; }
      set {
        terrainHeight_ = value;
      }
    }

    /// <summary>Field number for the "placement_grid" field.</summary>
    public const int PlacementGridFieldNumber = 4;
    private global::SC2APIProtocol.ImageData placementGrid_;
    /// <summary>
    /// 1 byte bitmap of the building placement grid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData PlacementGrid {
      get { return placementGrid_; }
      set {
        placementGrid_ = value;
      }
    }

    /// <summary>Field number for the "playable_area" field.</summary>
    public const int PlayableAreaFieldNumber = 5;
    private global::SC2APIProtocol.RectangleI playableArea_;
    /// <summary>
    /// The playable cells.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.RectangleI PlayableArea {
      get { return playableArea_; }
      set {
        playableArea_ = value;
      }
    }

    /// <summary>Field number for the "start_locations" field.</summary>
    public const int StartLocationsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.Point2D> _repeated_startLocations_codec
        = pb::FieldCodec.ForMessage(50, global::SC2APIProtocol.Point2D.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.Point2D> startLocations_ = new pbc::RepeatedField<global::SC2APIProtocol.Point2D>();
    /// <summary>
    /// Possible start locations for players.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.Point2D> StartLocations {
      get { return startLocations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MapSize, other.MapSize)) return false;
      if (!object.Equals(PathingGrid, other.PathingGrid)) return false;
      if (!object.Equals(TerrainHeight, other.TerrainHeight)) return false;
      if (!object.Equals(PlacementGrid, other.PlacementGrid)) return false;
      if (!object.Equals(PlayableArea, other.PlayableArea)) return false;
      if(!startLocations_.Equals(other.startLocations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mapSize_ != null) hash ^= MapSize.GetHashCode();
      if (pathingGrid_ != null) hash ^= PathingGrid.GetHashCode();
      if (terrainHeight_ != null) hash ^= TerrainHeight.GetHashCode();
      if (placementGrid_ != null) hash ^= PlacementGrid.GetHashCode();
      if (playableArea_ != null) hash ^= PlayableArea.GetHashCode();
      hash ^= startLocations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mapSize_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapSize);
      }
      if (pathingGrid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PathingGrid);
      }
      if (terrainHeight_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TerrainHeight);
      }
      if (placementGrid_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlacementGrid);
      }
      if (playableArea_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayableArea);
      }
      startLocations_.WriteTo(output, _repeated_startLocations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mapSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapSize);
      }
      if (pathingGrid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathingGrid);
      }
      if (terrainHeight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TerrainHeight);
      }
      if (placementGrid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlacementGrid);
      }
      if (playableArea_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayableArea);
      }
      size += startLocations_.CalculateSize(_repeated_startLocations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartRaw other) {
      if (other == null) {
        return;
      }
      if (other.mapSize_ != null) {
        if (mapSize_ == null) {
          mapSize_ = new global::SC2APIProtocol.Size2DI();
        }
        MapSize.MergeFrom(other.MapSize);
      }
      if (other.pathingGrid_ != null) {
        if (pathingGrid_ == null) {
          pathingGrid_ = new global::SC2APIProtocol.ImageData();
        }
        PathingGrid.MergeFrom(other.PathingGrid);
      }
      if (other.terrainHeight_ != null) {
        if (terrainHeight_ == null) {
          terrainHeight_ = new global::SC2APIProtocol.ImageData();
        }
        TerrainHeight.MergeFrom(other.TerrainHeight);
      }
      if (other.placementGrid_ != null) {
        if (placementGrid_ == null) {
          placementGrid_ = new global::SC2APIProtocol.ImageData();
        }
        PlacementGrid.MergeFrom(other.PlacementGrid);
      }
      if (other.playableArea_ != null) {
        if (playableArea_ == null) {
          playableArea_ = new global::SC2APIProtocol.RectangleI();
        }
        PlayableArea.MergeFrom(other.PlayableArea);
      }
      startLocations_.Add(other.startLocations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapSize_ == null) {
              mapSize_ = new global::SC2APIProtocol.Size2DI();
            }
            input.ReadMessage(mapSize_);
            break;
          }
          case 18: {
            if (pathingGrid_ == null) {
              pathingGrid_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(pathingGrid_);
            break;
          }
          case 26: {
            if (terrainHeight_ == null) {
              terrainHeight_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(terrainHeight_);
            break;
          }
          case 34: {
            if (placementGrid_ == null) {
              placementGrid_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(placementGrid_);
            break;
          }
          case 42: {
            if (playableArea_ == null) {
              playableArea_ = new global::SC2APIProtocol.RectangleI();
            }
            input.ReadMessage(playableArea_);
            break;
          }
          case 50: {
            startLocations_.AddEntriesFrom(input, _repeated_startLocations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObservationRaw : pb::IMessage<ObservationRaw> {
    private static readonly pb::MessageParser<ObservationRaw> _parser = new pb::MessageParser<ObservationRaw>(() => new ObservationRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObservationRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRaw(ObservationRaw other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
      units_ = other.units_.Clone();
      MapState = other.mapState_ != null ? other.MapState.Clone() : null;
      Event = other.event_ != null ? other.Event.Clone() : null;
      effects_ = other.effects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObservationRaw Clone() {
      return new ObservationRaw(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::SC2APIProtocol.PlayerRaw player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.PlayerRaw Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.Unit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.Unit> units_ = new pbc::RepeatedField<global::SC2APIProtocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.Unit> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "map_state" field.</summary>
    public const int MapStateFieldNumber = 3;
    private global::SC2APIProtocol.MapState mapState_;
    /// <summary>
    /// Fog of war, creep and so on. Board stuff that changes per frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.MapState MapState {
      get { return mapState_; }
      set {
        mapState_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 4;
    private global::SC2APIProtocol.Event event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Event Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "effects" field.</summary>
    public const int EffectsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.Effect> _repeated_effects_codec
        = pb::FieldCodec.ForMessage(42, global::SC2APIProtocol.Effect.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.Effect> effects_ = new pbc::RepeatedField<global::SC2APIProtocol.Effect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.Effect> Effects {
      get { return effects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObservationRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObservationRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if(!units_.Equals(other.units_)) return false;
      if (!object.Equals(MapState, other.MapState)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if(!effects_.Equals(other.effects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      hash ^= units_.GetHashCode();
      if (mapState_ != null) hash ^= MapState.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      hash ^= effects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (mapState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MapState);
      }
      if (event_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Event);
      }
      effects_.WriteTo(output, _repeated_effects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (mapState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapState);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      size += effects_.CalculateSize(_repeated_effects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObservationRaw other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::SC2APIProtocol.PlayerRaw();
        }
        Player.MergeFrom(other.Player);
      }
      units_.Add(other.units_);
      if (other.mapState_ != null) {
        if (mapState_ == null) {
          mapState_ = new global::SC2APIProtocol.MapState();
        }
        MapState.MergeFrom(other.MapState);
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::SC2APIProtocol.Event();
        }
        Event.MergeFrom(other.Event);
      }
      effects_.Add(other.effects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::SC2APIProtocol.PlayerRaw();
            }
            input.ReadMessage(player_);
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 26: {
            if (mapState_ == null) {
              mapState_ = new global::SC2APIProtocol.MapState();
            }
            input.ReadMessage(mapState_);
            break;
          }
          case 34: {
            if (event_ == null) {
              event_ = new global::SC2APIProtocol.Event();
            }
            input.ReadMessage(event_);
            break;
          }
          case 42: {
            effects_.AddEntriesFrom(input, _repeated_effects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PowerSource : pb::IMessage<PowerSource> {
    private static readonly pb::MessageParser<PowerSource> _parser = new pb::MessageParser<PowerSource>(() => new PowerSource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerSource(PowerSource other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      radius_ = other.radius_;
      tag_ = other.tag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerSource Clone() {
      return new PowerSource(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::SC2APIProtocol.Point pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Point Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private ulong tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Radius != other.Radius) return false;
      if (Tag != other.Tag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (Tag != 0UL) hash ^= Tag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (Tag != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Tag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (Tag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerSource other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::SC2APIProtocol.Point();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.Tag != 0UL) {
        Tag = other.Tag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::SC2APIProtocol.Point();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
          case 24: {
            Tag = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRaw : pb::IMessage<PlayerRaw> {
    private static readonly pb::MessageParser<PlayerRaw> _parser = new pb::MessageParser<PlayerRaw>(() => new PlayerRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRaw(PlayerRaw other) : this() {
      powerSources_ = other.powerSources_.Clone();
      Camera = other.camera_ != null ? other.Camera.Clone() : null;
      upgradeIds_ = other.upgradeIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRaw Clone() {
      return new PlayerRaw(this);
    }

    /// <summary>Field number for the "power_sources" field.</summary>
    public const int PowerSourcesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.PowerSource> _repeated_powerSources_codec
        = pb::FieldCodec.ForMessage(10, global::SC2APIProtocol.PowerSource.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.PowerSource> powerSources_ = new pbc::RepeatedField<global::SC2APIProtocol.PowerSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.PowerSource> PowerSources {
      get { return powerSources_; }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 2;
    private global::SC2APIProtocol.Point camera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Point Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "upgrade_ids" field.</summary>
    public const int UpgradeIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_upgradeIds_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> upgradeIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// TODO: Add to UI observation?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UpgradeIds {
      get { return upgradeIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!powerSources_.Equals(other.powerSources_)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if(!upgradeIds_.Equals(other.upgradeIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= powerSources_.GetHashCode();
      if (camera_ != null) hash ^= Camera.GetHashCode();
      hash ^= upgradeIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      powerSources_.WriteTo(output, _repeated_powerSources_codec);
      if (camera_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Camera);
      }
      upgradeIds_.WriteTo(output, _repeated_upgradeIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += powerSources_.CalculateSize(_repeated_powerSources_codec);
      if (camera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      size += upgradeIds_.CalculateSize(_repeated_upgradeIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRaw other) {
      if (other == null) {
        return;
      }
      powerSources_.Add(other.powerSources_);
      if (other.camera_ != null) {
        if (camera_ == null) {
          camera_ = new global::SC2APIProtocol.Point();
        }
        Camera.MergeFrom(other.Camera);
      }
      upgradeIds_.Add(other.upgradeIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            powerSources_.AddEntriesFrom(input, _repeated_powerSources_codec);
            break;
          }
          case 18: {
            if (camera_ == null) {
              camera_ = new global::SC2APIProtocol.Point();
            }
            input.ReadMessage(camera_);
            break;
          }
          case 26:
          case 24: {
            upgradeIds_.AddEntriesFrom(input, _repeated_upgradeIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitOrder : pb::IMessage<UnitOrder> {
    private static readonly pb::MessageParser<UnitOrder> _parser = new pb::MessageParser<UnitOrder>(() => new UnitOrder());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitOrder(UnitOrder other) : this() {
      abilityId_ = other.abilityId_;
      progress_ = other.progress_;
      switch (other.TargetCase) {
        case TargetOneofCase.TargetWorldSpacePos:
          TargetWorldSpacePos = other.TargetWorldSpacePos.Clone();
          break;
        case TargetOneofCase.TargetUnitTag:
          TargetUnitTag = other.TargetUnitTag;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitOrder Clone() {
      return new UnitOrder(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private uint abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "target_world_space_pos" field.</summary>
    public const int TargetWorldSpacePosFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Point TargetWorldSpacePos {
      get { return targetCase_ == TargetOneofCase.TargetWorldSpacePos ? (global::SC2APIProtocol.Point) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetWorldSpacePos;
      }
    }

    /// <summary>Field number for the "target_unit_tag" field.</summary>
    public const int TargetUnitTagFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnitTag {
      get { return targetCase_ == TargetOneofCase.TargetUnitTag ? (ulong) target_ : 0UL; }
      set {
        target_ = value;
        targetCase_ = TargetOneofCase.TargetUnitTag;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 4;
    private float progress_;
    /// <summary>
    /// Progress of train abilities. Range: [0.0, 1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      TargetWorldSpacePos = 2,
      TargetUnitTag = 3,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (!object.Equals(TargetWorldSpacePos, other.TargetWorldSpacePos)) return false;
      if (TargetUnitTag != other.TargetUnitTag) return false;
      if (Progress != other.Progress) return false;
      if (TargetCase != other.TargetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) hash ^= TargetWorldSpacePos.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetUnitTag) hash ^= TargetUnitTag.GetHashCode();
      if (Progress != 0F) hash ^= Progress.GetHashCode();
      hash ^= (int) targetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AbilityId);
      }
      if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetWorldSpacePos);
      }
      if (targetCase_ == TargetOneofCase.TargetUnitTag) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetUnitTag);
      }
      if (Progress != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AbilityId);
      }
      if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetWorldSpacePos);
      }
      if (targetCase_ == TargetOneofCase.TargetUnitTag) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnitTag);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitOrder other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.TargetWorldSpacePos:
          TargetWorldSpacePos = other.TargetWorldSpacePos;
          break;
        case TargetOneofCase.TargetUnitTag:
          TargetUnitTag = other.TargetUnitTag;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AbilityId = input.ReadUInt32();
            break;
          }
          case 18: {
            global::SC2APIProtocol.Point subBuilder = new global::SC2APIProtocol.Point();
            if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) {
              subBuilder.MergeFrom(TargetWorldSpacePos);
            }
            input.ReadMessage(subBuilder);
            TargetWorldSpacePos = subBuilder;
            break;
          }
          case 24: {
            TargetUnitTag = input.ReadUInt64();
            break;
          }
          case 37: {
            Progress = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassengerUnit : pb::IMessage<PassengerUnit> {
    private static readonly pb::MessageParser<PassengerUnit> _parser = new pb::MessageParser<PassengerUnit>(() => new PassengerUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassengerUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassengerUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassengerUnit(PassengerUnit other) : this() {
      tag_ = other.tag_;
      health_ = other.health_;
      healthMax_ = other.healthMax_;
      shield_ = other.shield_;
      shieldMax_ = other.shieldMax_;
      energy_ = other.energy_;
      energyMax_ = other.energyMax_;
      unitType_ = other.unitType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassengerUnit Clone() {
      return new PassengerUnit(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private ulong tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private float health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "health_max" field.</summary>
    public const int HealthMaxFieldNumber = 3;
    private float healthMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthMax {
      get { return healthMax_; }
      set {
        healthMax_ = value;
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 4;
    private float shield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    /// <summary>Field number for the "shield_max" field.</summary>
    public const int ShieldMaxFieldNumber = 7;
    private float shieldMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShieldMax {
      get { return shieldMax_; }
      set {
        shieldMax_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 5;
    private float energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "energy_max" field.</summary>
    public const int EnergyMaxFieldNumber = 8;
    private float energyMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EnergyMax {
      get { return energyMax_; }
      set {
        energyMax_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 6;
    private uint unitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassengerUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassengerUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (Health != other.Health) return false;
      if (HealthMax != other.HealthMax) return false;
      if (Shield != other.Shield) return false;
      if (ShieldMax != other.ShieldMax) return false;
      if (Energy != other.Energy) return false;
      if (EnergyMax != other.EnergyMax) return false;
      if (UnitType != other.UnitType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0UL) hash ^= Tag.GetHashCode();
      if (Health != 0F) hash ^= Health.GetHashCode();
      if (HealthMax != 0F) hash ^= HealthMax.GetHashCode();
      if (Shield != 0F) hash ^= Shield.GetHashCode();
      if (ShieldMax != 0F) hash ^= ShieldMax.GetHashCode();
      if (Energy != 0F) hash ^= Energy.GetHashCode();
      if (EnergyMax != 0F) hash ^= EnergyMax.GetHashCode();
      if (UnitType != 0) hash ^= UnitType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Tag);
      }
      if (Health != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Health);
      }
      if (HealthMax != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HealthMax);
      }
      if (Shield != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Shield);
      }
      if (Energy != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Energy);
      }
      if (UnitType != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UnitType);
      }
      if (ShieldMax != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ShieldMax);
      }
      if (EnergyMax != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(EnergyMax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tag);
      }
      if (Health != 0F) {
        size += 1 + 4;
      }
      if (HealthMax != 0F) {
        size += 1 + 4;
      }
      if (Shield != 0F) {
        size += 1 + 4;
      }
      if (ShieldMax != 0F) {
        size += 1 + 4;
      }
      if (Energy != 0F) {
        size += 1 + 4;
      }
      if (EnergyMax != 0F) {
        size += 1 + 4;
      }
      if (UnitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassengerUnit other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0UL) {
        Tag = other.Tag;
      }
      if (other.Health != 0F) {
        Health = other.Health;
      }
      if (other.HealthMax != 0F) {
        HealthMax = other.HealthMax;
      }
      if (other.Shield != 0F) {
        Shield = other.Shield;
      }
      if (other.ShieldMax != 0F) {
        ShieldMax = other.ShieldMax;
      }
      if (other.Energy != 0F) {
        Energy = other.Energy;
      }
      if (other.EnergyMax != 0F) {
        EnergyMax = other.EnergyMax;
      }
      if (other.UnitType != 0) {
        UnitType = other.UnitType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadUInt64();
            break;
          }
          case 21: {
            Health = input.ReadFloat();
            break;
          }
          case 29: {
            HealthMax = input.ReadFloat();
            break;
          }
          case 37: {
            Shield = input.ReadFloat();
            break;
          }
          case 45: {
            Energy = input.ReadFloat();
            break;
          }
          case 48: {
            UnitType = input.ReadUInt32();
            break;
          }
          case 61: {
            ShieldMax = input.ReadFloat();
            break;
          }
          case 69: {
            EnergyMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
      displayType_ = other.displayType_;
      alliance_ = other.alliance_;
      tag_ = other.tag_;
      unitType_ = other.unitType_;
      owner_ = other.owner_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      facing_ = other.facing_;
      radius_ = other.radius_;
      buildProgress_ = other.buildProgress_;
      cloak_ = other.cloak_;
      buffIds_ = other.buffIds_.Clone();
      detectRange_ = other.detectRange_;
      radarRange_ = other.radarRange_;
      isSelected_ = other.isSelected_;
      isOnScreen_ = other.isOnScreen_;
      isBlip_ = other.isBlip_;
      isPowered_ = other.isPowered_;
      isActive_ = other.isActive_;
      health_ = other.health_;
      healthMax_ = other.healthMax_;
      shield_ = other.shield_;
      shieldMax_ = other.shieldMax_;
      energy_ = other.energy_;
      energyMax_ = other.energyMax_;
      mineralContents_ = other.mineralContents_;
      vespeneContents_ = other.vespeneContents_;
      isFlying_ = other.isFlying_;
      isBurrowed_ = other.isBurrowed_;
      isHallucination_ = other.isHallucination_;
      orders_ = other.orders_.Clone();
      addOnTag_ = other.addOnTag_;
      passengers_ = other.passengers_.Clone();
      cargoSpaceTaken_ = other.cargoSpaceTaken_;
      cargoSpaceMax_ = other.cargoSpaceMax_;
      assignedHarvesters_ = other.assignedHarvesters_;
      idealHarvesters_ = other.idealHarvesters_;
      weaponCooldown_ = other.weaponCooldown_;
      engagedTargetTag_ = other.engagedTargetTag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "display_type" field.</summary>
    public const int DisplayTypeFieldNumber = 1;
    private global::SC2APIProtocol.DisplayType displayType_ = 0;
    /// <summary>
    /// Fields are populated based on type/alliance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.DisplayType DisplayType {
      get { return displayType_; }
      set {
        displayType_ = value;
      }
    }

    /// <summary>Field number for the "alliance" field.</summary>
    public const int AllianceFieldNumber = 2;
    private global::SC2APIProtocol.Alliance alliance_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Alliance Alliance {
      get { return alliance_; }
      set {
        alliance_ = value;
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private ulong tag_;
    /// <summary>
    /// Unique identifier for a unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "unit_type" field.</summary>
    public const int UnitTypeFieldNumber = 4;
    private uint unitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 5;
    private int owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 6;
    private global::SC2APIProtocol.Point pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Point Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "facing" field.</summary>
    public const int FacingFieldNumber = 7;
    private float facing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Facing {
      get { return facing_; }
      set {
        facing_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 8;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "build_progress" field.</summary>
    public const int BuildProgressFieldNumber = 9;
    private float buildProgress_;
    /// <summary>
    /// Range: [0.0, 1.0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BuildProgress {
      get { return buildProgress_; }
      set {
        buildProgress_ = value;
      }
    }

    /// <summary>Field number for the "cloak" field.</summary>
    public const int CloakFieldNumber = 10;
    private global::SC2APIProtocol.CloakState cloak_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CloakState Cloak {
      get { return cloak_; }
      set {
        cloak_ = value;
      }
    }

    /// <summary>Field number for the "buff_ids" field.</summary>
    public const int BuffIdsFieldNumber = 27;
    private static readonly pb::FieldCodec<uint> _repeated_buffIds_codec
        = pb::FieldCodec.ForUInt32(218);
    private readonly pbc::RepeatedField<uint> buffIds_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BuffIds {
      get { return buffIds_; }
    }

    /// <summary>Field number for the "detect_range" field.</summary>
    public const int DetectRangeFieldNumber = 31;
    private float detectRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetectRange {
      get { return detectRange_; }
      set {
        detectRange_ = value;
      }
    }

    /// <summary>Field number for the "radar_range" field.</summary>
    public const int RadarRangeFieldNumber = 32;
    private float radarRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadarRange {
      get { return radarRange_; }
      set {
        radarRange_ = value;
      }
    }

    /// <summary>Field number for the "is_selected" field.</summary>
    public const int IsSelectedFieldNumber = 11;
    private bool isSelected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSelected {
      get { return isSelected_; }
      set {
        isSelected_ = value;
      }
    }

    /// <summary>Field number for the "is_on_screen" field.</summary>
    public const int IsOnScreenFieldNumber = 12;
    private bool isOnScreen_;
    /// <summary>
    /// Visible and within the camera frustrum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnScreen {
      get { return isOnScreen_; }
      set {
        isOnScreen_ = value;
      }
    }

    /// <summary>Field number for the "is_blip" field.</summary>
    public const int IsBlipFieldNumber = 13;
    private bool isBlip_;
    /// <summary>
    /// Detected by sensor tower
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBlip {
      get { return isBlip_; }
      set {
        isBlip_ = value;
      }
    }

    /// <summary>Field number for the "is_powered" field.</summary>
    public const int IsPoweredFieldNumber = 35;
    private bool isPowered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPowered {
      get { return isPowered_; }
      set {
        isPowered_ = value;
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 39;
    private bool isActive_;
    /// <summary>
    /// Building is training/researching (ie animated).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 14;
    private float health_;
    /// <summary>
    /// Not populated for snapshots
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "health_max" field.</summary>
    public const int HealthMaxFieldNumber = 15;
    private float healthMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealthMax {
      get { return healthMax_; }
      set {
        healthMax_ = value;
      }
    }

    /// <summary>Field number for the "shield" field.</summary>
    public const int ShieldFieldNumber = 16;
    private float shield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shield {
      get { return shield_; }
      set {
        shield_ = value;
      }
    }

    /// <summary>Field number for the "shield_max" field.</summary>
    public const int ShieldMaxFieldNumber = 36;
    private float shieldMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShieldMax {
      get { return shieldMax_; }
      set {
        shieldMax_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 17;
    private float energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "energy_max" field.</summary>
    public const int EnergyMaxFieldNumber = 37;
    private float energyMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EnergyMax {
      get { return energyMax_; }
      set {
        energyMax_ = value;
      }
    }

    /// <summary>Field number for the "mineral_contents" field.</summary>
    public const int MineralContentsFieldNumber = 18;
    private int mineralContents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MineralContents {
      get { return mineralContents_; }
      set {
        mineralContents_ = value;
      }
    }

    /// <summary>Field number for the "vespene_contents" field.</summary>
    public const int VespeneContentsFieldNumber = 19;
    private int vespeneContents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VespeneContents {
      get { return vespeneContents_; }
      set {
        vespeneContents_ = value;
      }
    }

    /// <summary>Field number for the "is_flying" field.</summary>
    public const int IsFlyingFieldNumber = 20;
    private bool isFlying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFlying {
      get { return isFlying_; }
      set {
        isFlying_ = value;
      }
    }

    /// <summary>Field number for the "is_burrowed" field.</summary>
    public const int IsBurrowedFieldNumber = 21;
    private bool isBurrowed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurrowed {
      get { return isBurrowed_; }
      set {
        isBurrowed_ = value;
      }
    }

    /// <summary>Field number for the "is_hallucination" field.</summary>
    public const int IsHallucinationFieldNumber = 38;
    private bool isHallucination_;
    /// <summary>
    /// Unit is your own or detected as a hallucination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHallucination {
      get { return isHallucination_; }
      set {
        isHallucination_ = value;
      }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 22;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.UnitOrder> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(178, global::SC2APIProtocol.UnitOrder.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.UnitOrder> orders_ = new pbc::RepeatedField<global::SC2APIProtocol.UnitOrder>();
    /// <summary>
    /// Not populated for enemies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.UnitOrder> Orders {
      get { return orders_; }
    }

    /// <summary>Field number for the "add_on_tag" field.</summary>
    public const int AddOnTagFieldNumber = 23;
    private ulong addOnTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddOnTag {
      get { return addOnTag_; }
      set {
        addOnTag_ = value;
      }
    }

    /// <summary>Field number for the "passengers" field.</summary>
    public const int PassengersFieldNumber = 24;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.PassengerUnit> _repeated_passengers_codec
        = pb::FieldCodec.ForMessage(194, global::SC2APIProtocol.PassengerUnit.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.PassengerUnit> passengers_ = new pbc::RepeatedField<global::SC2APIProtocol.PassengerUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.PassengerUnit> Passengers {
      get { return passengers_; }
    }

    /// <summary>Field number for the "cargo_space_taken" field.</summary>
    public const int CargoSpaceTakenFieldNumber = 25;
    private int cargoSpaceTaken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CargoSpaceTaken {
      get { return cargoSpaceTaken_; }
      set {
        cargoSpaceTaken_ = value;
      }
    }

    /// <summary>Field number for the "cargo_space_max" field.</summary>
    public const int CargoSpaceMaxFieldNumber = 26;
    private int cargoSpaceMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CargoSpaceMax {
      get { return cargoSpaceMax_; }
      set {
        cargoSpaceMax_ = value;
      }
    }

    /// <summary>Field number for the "assigned_harvesters" field.</summary>
    public const int AssignedHarvestersFieldNumber = 28;
    private int assignedHarvesters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AssignedHarvesters {
      get { return assignedHarvesters_; }
      set {
        assignedHarvesters_ = value;
      }
    }

    /// <summary>Field number for the "ideal_harvesters" field.</summary>
    public const int IdealHarvestersFieldNumber = 29;
    private int idealHarvesters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdealHarvesters {
      get { return idealHarvesters_; }
      set {
        idealHarvesters_ = value;
      }
    }

    /// <summary>Field number for the "weapon_cooldown" field.</summary>
    public const int WeaponCooldownFieldNumber = 30;
    private float weaponCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeaponCooldown {
      get { return weaponCooldown_; }
      set {
        weaponCooldown_ = value;
      }
    }

    /// <summary>Field number for the "engaged_target_tag" field.</summary>
    public const int EngagedTargetTagFieldNumber = 34;
    private ulong engagedTargetTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EngagedTargetTag {
      get { return engagedTargetTag_; }
      set {
        engagedTargetTag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisplayType != other.DisplayType) return false;
      if (Alliance != other.Alliance) return false;
      if (Tag != other.Tag) return false;
      if (UnitType != other.UnitType) return false;
      if (Owner != other.Owner) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Facing != other.Facing) return false;
      if (Radius != other.Radius) return false;
      if (BuildProgress != other.BuildProgress) return false;
      if (Cloak != other.Cloak) return false;
      if(!buffIds_.Equals(other.buffIds_)) return false;
      if (DetectRange != other.DetectRange) return false;
      if (RadarRange != other.RadarRange) return false;
      if (IsSelected != other.IsSelected) return false;
      if (IsOnScreen != other.IsOnScreen) return false;
      if (IsBlip != other.IsBlip) return false;
      if (IsPowered != other.IsPowered) return false;
      if (IsActive != other.IsActive) return false;
      if (Health != other.Health) return false;
      if (HealthMax != other.HealthMax) return false;
      if (Shield != other.Shield) return false;
      if (ShieldMax != other.ShieldMax) return false;
      if (Energy != other.Energy) return false;
      if (EnergyMax != other.EnergyMax) return false;
      if (MineralContents != other.MineralContents) return false;
      if (VespeneContents != other.VespeneContents) return false;
      if (IsFlying != other.IsFlying) return false;
      if (IsBurrowed != other.IsBurrowed) return false;
      if (IsHallucination != other.IsHallucination) return false;
      if(!orders_.Equals(other.orders_)) return false;
      if (AddOnTag != other.AddOnTag) return false;
      if(!passengers_.Equals(other.passengers_)) return false;
      if (CargoSpaceTaken != other.CargoSpaceTaken) return false;
      if (CargoSpaceMax != other.CargoSpaceMax) return false;
      if (AssignedHarvesters != other.AssignedHarvesters) return false;
      if (IdealHarvesters != other.IdealHarvesters) return false;
      if (WeaponCooldown != other.WeaponCooldown) return false;
      if (EngagedTargetTag != other.EngagedTargetTag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisplayType != 0) hash ^= DisplayType.GetHashCode();
      if (Alliance != 0) hash ^= Alliance.GetHashCode();
      if (Tag != 0UL) hash ^= Tag.GetHashCode();
      if (UnitType != 0) hash ^= UnitType.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Facing != 0F) hash ^= Facing.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (BuildProgress != 0F) hash ^= BuildProgress.GetHashCode();
      if (Cloak != 0) hash ^= Cloak.GetHashCode();
      hash ^= buffIds_.GetHashCode();
      if (DetectRange != 0F) hash ^= DetectRange.GetHashCode();
      if (RadarRange != 0F) hash ^= RadarRange.GetHashCode();
      if (IsSelected != false) hash ^= IsSelected.GetHashCode();
      if (IsOnScreen != false) hash ^= IsOnScreen.GetHashCode();
      if (IsBlip != false) hash ^= IsBlip.GetHashCode();
      if (IsPowered != false) hash ^= IsPowered.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (Health != 0F) hash ^= Health.GetHashCode();
      if (HealthMax != 0F) hash ^= HealthMax.GetHashCode();
      if (Shield != 0F) hash ^= Shield.GetHashCode();
      if (ShieldMax != 0F) hash ^= ShieldMax.GetHashCode();
      if (Energy != 0F) hash ^= Energy.GetHashCode();
      if (EnergyMax != 0F) hash ^= EnergyMax.GetHashCode();
      if (MineralContents != 0) hash ^= MineralContents.GetHashCode();
      if (VespeneContents != 0) hash ^= VespeneContents.GetHashCode();
      if (IsFlying != false) hash ^= IsFlying.GetHashCode();
      if (IsBurrowed != false) hash ^= IsBurrowed.GetHashCode();
      if (IsHallucination != false) hash ^= IsHallucination.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (AddOnTag != 0UL) hash ^= AddOnTag.GetHashCode();
      hash ^= passengers_.GetHashCode();
      if (CargoSpaceTaken != 0) hash ^= CargoSpaceTaken.GetHashCode();
      if (CargoSpaceMax != 0) hash ^= CargoSpaceMax.GetHashCode();
      if (AssignedHarvesters != 0) hash ^= AssignedHarvesters.GetHashCode();
      if (IdealHarvesters != 0) hash ^= IdealHarvesters.GetHashCode();
      if (WeaponCooldown != 0F) hash ^= WeaponCooldown.GetHashCode();
      if (EngagedTargetTag != 0UL) hash ^= EngagedTargetTag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisplayType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DisplayType);
      }
      if (Alliance != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Alliance);
      }
      if (Tag != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Tag);
      }
      if (UnitType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnitType);
      }
      if (Owner != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Owner);
      }
      if (pos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pos);
      }
      if (Facing != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Facing);
      }
      if (Radius != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Radius);
      }
      if (BuildProgress != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(BuildProgress);
      }
      if (Cloak != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Cloak);
      }
      if (IsSelected != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsSelected);
      }
      if (IsOnScreen != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsOnScreen);
      }
      if (IsBlip != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsBlip);
      }
      if (Health != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Health);
      }
      if (HealthMax != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(HealthMax);
      }
      if (Shield != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Shield);
      }
      if (Energy != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Energy);
      }
      if (MineralContents != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MineralContents);
      }
      if (VespeneContents != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(VespeneContents);
      }
      if (IsFlying != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsFlying);
      }
      if (IsBurrowed != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsBurrowed);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
      if (AddOnTag != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(AddOnTag);
      }
      passengers_.WriteTo(output, _repeated_passengers_codec);
      if (CargoSpaceTaken != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(CargoSpaceTaken);
      }
      if (CargoSpaceMax != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CargoSpaceMax);
      }
      buffIds_.WriteTo(output, _repeated_buffIds_codec);
      if (AssignedHarvesters != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(AssignedHarvesters);
      }
      if (IdealHarvesters != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(IdealHarvesters);
      }
      if (WeaponCooldown != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(WeaponCooldown);
      }
      if (DetectRange != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(DetectRange);
      }
      if (RadarRange != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(RadarRange);
      }
      if (EngagedTargetTag != 0UL) {
        output.WriteRawTag(144, 2);
        output.WriteUInt64(EngagedTargetTag);
      }
      if (IsPowered != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(IsPowered);
      }
      if (ShieldMax != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(ShieldMax);
      }
      if (EnergyMax != 0F) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(EnergyMax);
      }
      if (IsHallucination != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(IsHallucination);
      }
      if (IsActive != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsActive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisplayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DisplayType);
      }
      if (Alliance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Alliance);
      }
      if (Tag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tag);
      }
      if (UnitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitType);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Facing != 0F) {
        size += 1 + 4;
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (BuildProgress != 0F) {
        size += 1 + 4;
      }
      if (Cloak != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cloak);
      }
      size += buffIds_.CalculateSize(_repeated_buffIds_codec);
      if (DetectRange != 0F) {
        size += 2 + 4;
      }
      if (RadarRange != 0F) {
        size += 2 + 4;
      }
      if (IsSelected != false) {
        size += 1 + 1;
      }
      if (IsOnScreen != false) {
        size += 1 + 1;
      }
      if (IsBlip != false) {
        size += 1 + 1;
      }
      if (IsPowered != false) {
        size += 2 + 1;
      }
      if (IsActive != false) {
        size += 2 + 1;
      }
      if (Health != 0F) {
        size += 1 + 4;
      }
      if (HealthMax != 0F) {
        size += 1 + 4;
      }
      if (Shield != 0F) {
        size += 2 + 4;
      }
      if (ShieldMax != 0F) {
        size += 2 + 4;
      }
      if (Energy != 0F) {
        size += 2 + 4;
      }
      if (EnergyMax != 0F) {
        size += 2 + 4;
      }
      if (MineralContents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MineralContents);
      }
      if (VespeneContents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VespeneContents);
      }
      if (IsFlying != false) {
        size += 2 + 1;
      }
      if (IsBurrowed != false) {
        size += 2 + 1;
      }
      if (IsHallucination != false) {
        size += 2 + 1;
      }
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (AddOnTag != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AddOnTag);
      }
      size += passengers_.CalculateSize(_repeated_passengers_codec);
      if (CargoSpaceTaken != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CargoSpaceTaken);
      }
      if (CargoSpaceMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CargoSpaceMax);
      }
      if (AssignedHarvesters != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssignedHarvesters);
      }
      if (IdealHarvesters != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IdealHarvesters);
      }
      if (WeaponCooldown != 0F) {
        size += 2 + 4;
      }
      if (EngagedTargetTag != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EngagedTargetTag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.DisplayType != 0) {
        DisplayType = other.DisplayType;
      }
      if (other.Alliance != 0) {
        Alliance = other.Alliance;
      }
      if (other.Tag != 0UL) {
        Tag = other.Tag;
      }
      if (other.UnitType != 0) {
        UnitType = other.UnitType;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::SC2APIProtocol.Point();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Facing != 0F) {
        Facing = other.Facing;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.BuildProgress != 0F) {
        BuildProgress = other.BuildProgress;
      }
      if (other.Cloak != 0) {
        Cloak = other.Cloak;
      }
      buffIds_.Add(other.buffIds_);
      if (other.DetectRange != 0F) {
        DetectRange = other.DetectRange;
      }
      if (other.RadarRange != 0F) {
        RadarRange = other.RadarRange;
      }
      if (other.IsSelected != false) {
        IsSelected = other.IsSelected;
      }
      if (other.IsOnScreen != false) {
        IsOnScreen = other.IsOnScreen;
      }
      if (other.IsBlip != false) {
        IsBlip = other.IsBlip;
      }
      if (other.IsPowered != false) {
        IsPowered = other.IsPowered;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.Health != 0F) {
        Health = other.Health;
      }
      if (other.HealthMax != 0F) {
        HealthMax = other.HealthMax;
      }
      if (other.Shield != 0F) {
        Shield = other.Shield;
      }
      if (other.ShieldMax != 0F) {
        ShieldMax = other.ShieldMax;
      }
      if (other.Energy != 0F) {
        Energy = other.Energy;
      }
      if (other.EnergyMax != 0F) {
        EnergyMax = other.EnergyMax;
      }
      if (other.MineralContents != 0) {
        MineralContents = other.MineralContents;
      }
      if (other.VespeneContents != 0) {
        VespeneContents = other.VespeneContents;
      }
      if (other.IsFlying != false) {
        IsFlying = other.IsFlying;
      }
      if (other.IsBurrowed != false) {
        IsBurrowed = other.IsBurrowed;
      }
      if (other.IsHallucination != false) {
        IsHallucination = other.IsHallucination;
      }
      orders_.Add(other.orders_);
      if (other.AddOnTag != 0UL) {
        AddOnTag = other.AddOnTag;
      }
      passengers_.Add(other.passengers_);
      if (other.CargoSpaceTaken != 0) {
        CargoSpaceTaken = other.CargoSpaceTaken;
      }
      if (other.CargoSpaceMax != 0) {
        CargoSpaceMax = other.CargoSpaceMax;
      }
      if (other.AssignedHarvesters != 0) {
        AssignedHarvesters = other.AssignedHarvesters;
      }
      if (other.IdealHarvesters != 0) {
        IdealHarvesters = other.IdealHarvesters;
      }
      if (other.WeaponCooldown != 0F) {
        WeaponCooldown = other.WeaponCooldown;
      }
      if (other.EngagedTargetTag != 0UL) {
        EngagedTargetTag = other.EngagedTargetTag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            displayType_ = (global::SC2APIProtocol.DisplayType) input.ReadEnum();
            break;
          }
          case 16: {
            alliance_ = (global::SC2APIProtocol.Alliance) input.ReadEnum();
            break;
          }
          case 24: {
            Tag = input.ReadUInt64();
            break;
          }
          case 32: {
            UnitType = input.ReadUInt32();
            break;
          }
          case 40: {
            Owner = input.ReadInt32();
            break;
          }
          case 50: {
            if (pos_ == null) {
              pos_ = new global::SC2APIProtocol.Point();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 61: {
            Facing = input.ReadFloat();
            break;
          }
          case 69: {
            Radius = input.ReadFloat();
            break;
          }
          case 77: {
            BuildProgress = input.ReadFloat();
            break;
          }
          case 80: {
            cloak_ = (global::SC2APIProtocol.CloakState) input.ReadEnum();
            break;
          }
          case 88: {
            IsSelected = input.ReadBool();
            break;
          }
          case 96: {
            IsOnScreen = input.ReadBool();
            break;
          }
          case 104: {
            IsBlip = input.ReadBool();
            break;
          }
          case 117: {
            Health = input.ReadFloat();
            break;
          }
          case 125: {
            HealthMax = input.ReadFloat();
            break;
          }
          case 133: {
            Shield = input.ReadFloat();
            break;
          }
          case 141: {
            Energy = input.ReadFloat();
            break;
          }
          case 144: {
            MineralContents = input.ReadInt32();
            break;
          }
          case 152: {
            VespeneContents = input.ReadInt32();
            break;
          }
          case 160: {
            IsFlying = input.ReadBool();
            break;
          }
          case 168: {
            IsBurrowed = input.ReadBool();
            break;
          }
          case 178: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
          case 184: {
            AddOnTag = input.ReadUInt64();
            break;
          }
          case 194: {
            passengers_.AddEntriesFrom(input, _repeated_passengers_codec);
            break;
          }
          case 200: {
            CargoSpaceTaken = input.ReadInt32();
            break;
          }
          case 208: {
            CargoSpaceMax = input.ReadInt32();
            break;
          }
          case 218:
          case 216: {
            buffIds_.AddEntriesFrom(input, _repeated_buffIds_codec);
            break;
          }
          case 224: {
            AssignedHarvesters = input.ReadInt32();
            break;
          }
          case 232: {
            IdealHarvesters = input.ReadInt32();
            break;
          }
          case 245: {
            WeaponCooldown = input.ReadFloat();
            break;
          }
          case 253: {
            DetectRange = input.ReadFloat();
            break;
          }
          case 261: {
            RadarRange = input.ReadFloat();
            break;
          }
          case 272: {
            EngagedTargetTag = input.ReadUInt64();
            break;
          }
          case 280: {
            IsPowered = input.ReadBool();
            break;
          }
          case 293: {
            ShieldMax = input.ReadFloat();
            break;
          }
          case 301: {
            EnergyMax = input.ReadFloat();
            break;
          }
          case 304: {
            IsHallucination = input.ReadBool();
            break;
          }
          case 312: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapState : pb::IMessage<MapState> {
    private static readonly pb::MessageParser<MapState> _parser = new pb::MessageParser<MapState>(() => new MapState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapState(MapState other) : this() {
      Visibility = other.visibility_ != null ? other.Visibility.Clone() : null;
      Creep = other.creep_ != null ? other.Creep.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapState Clone() {
      return new MapState(this);
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 1;
    private global::SC2APIProtocol.ImageData visibility_;
    /// <summary>
    /// 1 byte visibility layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "creep" field.</summary>
    public const int CreepFieldNumber = 2;
    private global::SC2APIProtocol.ImageData creep_;
    /// <summary>
    /// 1 byte creep layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ImageData Creep {
      get { return creep_; }
      set {
        creep_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (!object.Equals(Creep, other.Creep)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (creep_ != null) hash ^= Creep.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (visibility_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Visibility);
      }
      if (creep_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Creep);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (visibility_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (creep_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creep);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapState other) {
      if (other == null) {
        return;
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          visibility_ = new global::SC2APIProtocol.ImageData();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.creep_ != null) {
        if (creep_ == null) {
          creep_ = new global::SC2APIProtocol.ImageData();
        }
        Creep.MergeFrom(other.Creep);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (visibility_ == null) {
              visibility_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(visibility_);
            break;
          }
          case 18: {
            if (creep_ == null) {
              creep_ = new global::SC2APIProtocol.ImageData();
            }
            input.ReadMessage(creep_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      deadUnits_ = other.deadUnits_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "dead_units" field.</summary>
    public const int DeadUnitsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_deadUnits_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> deadUnits_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> DeadUnits {
      get { return deadUnits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deadUnits_.Equals(other.deadUnits_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deadUnits_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deadUnits_.WriteTo(output, _repeated_deadUnits_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deadUnits_.CalculateSize(_repeated_deadUnits_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      deadUnits_.Add(other.deadUnits_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            deadUnits_.AddEntriesFrom(input, _repeated_deadUnits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Effect : pb::IMessage<Effect> {
    private static readonly pb::MessageParser<Effect> _parser = new pb::MessageParser<Effect>(() => new Effect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Effect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect(Effect other) : this() {
      effectId_ = other.effectId_;
      pos_ = other.pos_.Clone();
      alliance_ = other.alliance_;
      owner_ = other.owner_;
      radius_ = other.radius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect Clone() {
      return new Effect(this);
    }

    /// <summary>Field number for the "effect_id" field.</summary>
    public const int EffectIdFieldNumber = 1;
    private uint effectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SC2APIProtocol.Point2D> _repeated_pos_codec
        = pb::FieldCodec.ForMessage(18, global::SC2APIProtocol.Point2D.Parser);
    private readonly pbc::RepeatedField<global::SC2APIProtocol.Point2D> pos_ = new pbc::RepeatedField<global::SC2APIProtocol.Point2D>();
    /// <summary>
    /// Effect may impact multiple locations. (eg. Lurker attack)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SC2APIProtocol.Point2D> Pos {
      get { return pos_; }
    }

    /// <summary>Field number for the "alliance" field.</summary>
    public const int AllianceFieldNumber = 3;
    private global::SC2APIProtocol.Alliance alliance_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Alliance Alliance {
      get { return alliance_; }
      set {
        alliance_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private int owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 5;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Effect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Effect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectId != other.EffectId) return false;
      if(!pos_.Equals(other.pos_)) return false;
      if (Alliance != other.Alliance) return false;
      if (Owner != other.Owner) return false;
      if (Radius != other.Radius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      hash ^= pos_.GetHashCode();
      if (Alliance != 0) hash ^= Alliance.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EffectId);
      }
      pos_.WriteTo(output, _repeated_pos_codec);
      if (Alliance != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Alliance);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Owner);
      }
      if (Radius != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Radius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectId);
      }
      size += pos_.CalculateSize(_repeated_pos_codec);
      if (Alliance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Alliance);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Owner);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Effect other) {
      if (other == null) {
        return;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      pos_.Add(other.pos_);
      if (other.Alliance != 0) {
        Alliance = other.Alliance;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EffectId = input.ReadUInt32();
            break;
          }
          case 18: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
          case 24: {
            alliance_ = (global::SC2APIProtocol.Alliance) input.ReadEnum();
            break;
          }
          case 32: {
            Owner = input.ReadInt32();
            break;
          }
          case 45: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionRaw : pb::IMessage<ActionRaw> {
    private static readonly pb::MessageParser<ActionRaw> _parser = new pb::MessageParser<ActionRaw>(() => new ActionRaw());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRaw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRaw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRaw(ActionRaw other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.UnitCommand:
          UnitCommand = other.UnitCommand.Clone();
          break;
        case ActionOneofCase.CameraMove:
          CameraMove = other.CameraMove.Clone();
          break;
        case ActionOneofCase.ToggleAutocast:
          ToggleAutocast = other.ToggleAutocast.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRaw Clone() {
      return new ActionRaw(this);
    }

    /// <summary>Field number for the "unit_command" field.</summary>
    public const int UnitCommandFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionRawUnitCommand UnitCommand {
      get { return actionCase_ == ActionOneofCase.UnitCommand ? (global::SC2APIProtocol.ActionRawUnitCommand) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.UnitCommand;
      }
    }

    /// <summary>Field number for the "camera_move" field.</summary>
    public const int CameraMoveFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionRawCameraMove CameraMove {
      get { return actionCase_ == ActionOneofCase.CameraMove ? (global::SC2APIProtocol.ActionRawCameraMove) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.CameraMove;
      }
    }

    /// <summary>Field number for the "toggle_autocast" field.</summary>
    public const int ToggleAutocastFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ActionRawToggleAutocast ToggleAutocast {
      get { return actionCase_ == ActionOneofCase.ToggleAutocast ? (global::SC2APIProtocol.ActionRawToggleAutocast) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.ToggleAutocast;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      UnitCommand = 1,
      CameraMove = 2,
      ToggleAutocast = 3,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRaw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRaw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnitCommand, other.UnitCommand)) return false;
      if (!object.Equals(CameraMove, other.CameraMove)) return false;
      if (!object.Equals(ToggleAutocast, other.ToggleAutocast)) return false;
      if (ActionCase != other.ActionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.UnitCommand) hash ^= UnitCommand.GetHashCode();
      if (actionCase_ == ActionOneofCase.CameraMove) hash ^= CameraMove.GetHashCode();
      if (actionCase_ == ActionOneofCase.ToggleAutocast) hash ^= ToggleAutocast.GetHashCode();
      hash ^= (int) actionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionCase_ == ActionOneofCase.UnitCommand) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitCommand);
      }
      if (actionCase_ == ActionOneofCase.CameraMove) {
        output.WriteRawTag(18);
        output.WriteMessage(CameraMove);
      }
      if (actionCase_ == ActionOneofCase.ToggleAutocast) {
        output.WriteRawTag(26);
        output.WriteMessage(ToggleAutocast);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.UnitCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitCommand);
      }
      if (actionCase_ == ActionOneofCase.CameraMove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraMove);
      }
      if (actionCase_ == ActionOneofCase.ToggleAutocast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToggleAutocast);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRaw other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.UnitCommand:
          UnitCommand = other.UnitCommand;
          break;
        case ActionOneofCase.CameraMove:
          CameraMove = other.CameraMove;
          break;
        case ActionOneofCase.ToggleAutocast:
          ToggleAutocast = other.ToggleAutocast;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::SC2APIProtocol.ActionRawUnitCommand subBuilder = new global::SC2APIProtocol.ActionRawUnitCommand();
            if (actionCase_ == ActionOneofCase.UnitCommand) {
              subBuilder.MergeFrom(UnitCommand);
            }
            input.ReadMessage(subBuilder);
            UnitCommand = subBuilder;
            break;
          }
          case 18: {
            global::SC2APIProtocol.ActionRawCameraMove subBuilder = new global::SC2APIProtocol.ActionRawCameraMove();
            if (actionCase_ == ActionOneofCase.CameraMove) {
              subBuilder.MergeFrom(CameraMove);
            }
            input.ReadMessage(subBuilder);
            CameraMove = subBuilder;
            break;
          }
          case 26: {
            global::SC2APIProtocol.ActionRawToggleAutocast subBuilder = new global::SC2APIProtocol.ActionRawToggleAutocast();
            if (actionCase_ == ActionOneofCase.ToggleAutocast) {
              subBuilder.MergeFrom(ToggleAutocast);
            }
            input.ReadMessage(subBuilder);
            ToggleAutocast = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionRawUnitCommand : pb::IMessage<ActionRawUnitCommand> {
    private static readonly pb::MessageParser<ActionRawUnitCommand> _parser = new pb::MessageParser<ActionRawUnitCommand>(() => new ActionRawUnitCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRawUnitCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawUnitCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawUnitCommand(ActionRawUnitCommand other) : this() {
      abilityId_ = other.abilityId_;
      unitTags_ = other.unitTags_.Clone();
      queueCommand_ = other.queueCommand_;
      switch (other.TargetCase) {
        case TargetOneofCase.TargetWorldSpacePos:
          TargetWorldSpacePos = other.TargetWorldSpacePos.Clone();
          break;
        case TargetOneofCase.TargetUnitTag:
          TargetUnitTag = other.TargetUnitTag;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawUnitCommand Clone() {
      return new ActionRawUnitCommand(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "target_world_space_pos" field.</summary>
    public const int TargetWorldSpacePosFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Point2D TargetWorldSpacePos {
      get { return targetCase_ == TargetOneofCase.TargetWorldSpacePos ? (global::SC2APIProtocol.Point2D) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetWorldSpacePos;
      }
    }

    /// <summary>Field number for the "target_unit_tag" field.</summary>
    public const int TargetUnitTagFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnitTag {
      get { return targetCase_ == TargetOneofCase.TargetUnitTag ? (ulong) target_ : 0UL; }
      set {
        target_ = value;
        targetCase_ = TargetOneofCase.TargetUnitTag;
      }
    }

    /// <summary>Field number for the "unit_tags" field.</summary>
    public const int UnitTagsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_unitTags_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> unitTags_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UnitTags {
      get { return unitTags_; }
    }

    /// <summary>Field number for the "queue_command" field.</summary>
    public const int QueueCommandFieldNumber = 5;
    private bool queueCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueueCommand {
      get { return queueCommand_; }
      set {
        queueCommand_ = value;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      TargetWorldSpacePos = 2,
      TargetUnitTag = 3,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRawUnitCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRawUnitCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (!object.Equals(TargetWorldSpacePos, other.TargetWorldSpacePos)) return false;
      if (TargetUnitTag != other.TargetUnitTag) return false;
      if(!unitTags_.Equals(other.unitTags_)) return false;
      if (QueueCommand != other.QueueCommand) return false;
      if (TargetCase != other.TargetCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) hash ^= TargetWorldSpacePos.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetUnitTag) hash ^= TargetUnitTag.GetHashCode();
      hash ^= unitTags_.GetHashCode();
      if (QueueCommand != false) hash ^= QueueCommand.GetHashCode();
      hash ^= (int) targetCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetWorldSpacePos);
      }
      if (targetCase_ == TargetOneofCase.TargetUnitTag) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetUnitTag);
      }
      unitTags_.WriteTo(output, _repeated_unitTags_codec);
      if (QueueCommand != false) {
        output.WriteRawTag(40);
        output.WriteBool(QueueCommand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetWorldSpacePos);
      }
      if (targetCase_ == TargetOneofCase.TargetUnitTag) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnitTag);
      }
      size += unitTags_.CalculateSize(_repeated_unitTags_codec);
      if (QueueCommand != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRawUnitCommand other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      unitTags_.Add(other.unitTags_);
      if (other.QueueCommand != false) {
        QueueCommand = other.QueueCommand;
      }
      switch (other.TargetCase) {
        case TargetOneofCase.TargetWorldSpacePos:
          TargetWorldSpacePos = other.TargetWorldSpacePos;
          break;
        case TargetOneofCase.TargetUnitTag:
          TargetUnitTag = other.TargetUnitTag;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 18: {
            global::SC2APIProtocol.Point2D subBuilder = new global::SC2APIProtocol.Point2D();
            if (targetCase_ == TargetOneofCase.TargetWorldSpacePos) {
              subBuilder.MergeFrom(TargetWorldSpacePos);
            }
            input.ReadMessage(subBuilder);
            TargetWorldSpacePos = subBuilder;
            break;
          }
          case 24: {
            TargetUnitTag = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            unitTags_.AddEntriesFrom(input, _repeated_unitTags_codec);
            break;
          }
          case 40: {
            QueueCommand = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionRawCameraMove : pb::IMessage<ActionRawCameraMove> {
    private static readonly pb::MessageParser<ActionRawCameraMove> _parser = new pb::MessageParser<ActionRawCameraMove>(() => new ActionRawCameraMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRawCameraMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawCameraMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawCameraMove(ActionRawCameraMove other) : this() {
      CenterWorldSpace = other.centerWorldSpace_ != null ? other.CenterWorldSpace.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawCameraMove Clone() {
      return new ActionRawCameraMove(this);
    }

    /// <summary>Field number for the "center_world_space" field.</summary>
    public const int CenterWorldSpaceFieldNumber = 1;
    private global::SC2APIProtocol.Point centerWorldSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Point CenterWorldSpace {
      get { return centerWorldSpace_; }
      set {
        centerWorldSpace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRawCameraMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRawCameraMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CenterWorldSpace, other.CenterWorldSpace)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (centerWorldSpace_ != null) hash ^= CenterWorldSpace.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (centerWorldSpace_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CenterWorldSpace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (centerWorldSpace_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterWorldSpace);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRawCameraMove other) {
      if (other == null) {
        return;
      }
      if (other.centerWorldSpace_ != null) {
        if (centerWorldSpace_ == null) {
          centerWorldSpace_ = new global::SC2APIProtocol.Point();
        }
        CenterWorldSpace.MergeFrom(other.CenterWorldSpace);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (centerWorldSpace_ == null) {
              centerWorldSpace_ = new global::SC2APIProtocol.Point();
            }
            input.ReadMessage(centerWorldSpace_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ActionRawToggleAutocast : pb::IMessage<ActionRawToggleAutocast> {
    private static readonly pb::MessageParser<ActionRawToggleAutocast> _parser = new pb::MessageParser<ActionRawToggleAutocast>(() => new ActionRawToggleAutocast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionRawToggleAutocast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.RawReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawToggleAutocast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawToggleAutocast(ActionRawToggleAutocast other) : this() {
      abilityId_ = other.abilityId_;
      unitTags_ = other.unitTags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionRawToggleAutocast Clone() {
      return new ActionRawToggleAutocast(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "unit_tags" field.</summary>
    public const int UnitTagsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_unitTags_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> unitTags_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UnitTags {
      get { return unitTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionRawToggleAutocast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionRawToggleAutocast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if(!unitTags_.Equals(other.unitTags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      hash ^= unitTags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      unitTags_.WriteTo(output, _repeated_unitTags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      size += unitTags_.CalculateSize(_repeated_unitTags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionRawToggleAutocast other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      unitTags_.Add(other.unitTags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            unitTags_.AddEntriesFrom(input, _repeated_unitTags_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
