// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/score.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SC2APIProtocol {

  /// <summary>Holder for reflection information generated from s2clientprotocol/score.proto</summary>
  public static partial class ScoreReflection {

    #region Descriptor
    /// <summary>File descriptor for s2clientprotocol/score.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxzMmNsaWVudHByb3RvY29sL3Njb3JlLnByb3RvEg5TQzJBUElQcm90b2Nv",
            "bCKzAQoFU2NvcmUSMwoKc2NvcmVfdHlwZRgGIAEoDjIfLlNDMkFQSVByb3Rv",
            "Y29sLlNjb3JlLlNjb3JlVHlwZRINCgVzY29yZRgHIAEoBRIzCg1zY29yZV9k",
            "ZXRhaWxzGAggASgLMhwuU0MyQVBJUHJvdG9jb2wuU2NvcmVEZXRhaWxzIjEK",
            "CVNjb3JlVHlwZRIJCgVEdW1teRAAEg4KCkN1cnJpY3VsdW0QARIJCgVNZWxl",
            "ZRACImgKFENhdGVnb3J5U2NvcmVEZXRhaWxzEgwKBG5vbmUYASABKAISDAoE",
            "YXJteRgCIAEoAhIPCgdlY29ub215GAMgASgCEhIKCnRlY2hub2xvZ3kYBCAB",
            "KAISDwoHdXBncmFkZRgFIAEoAiJCChFWaXRhbFNjb3JlRGV0YWlscxIMCgRs",
            "aWZlGAEgASgCEg8KB3NoaWVsZHMYAiABKAISDgoGZW5lcmd5GAMgASgCItYJ",
            "CgxTY29yZURldGFpbHMSHAoUaWRsZV9wcm9kdWN0aW9uX3RpbWUYASABKAIS",
            "GAoQaWRsZV93b3JrZXJfdGltZRgCIAEoAhIZChF0b3RhbF92YWx1ZV91bml0",
            "cxgDIAEoAhIeChZ0b3RhbF92YWx1ZV9zdHJ1Y3R1cmVzGAQgASgCEhoKEmtp",
            "bGxlZF92YWx1ZV91bml0cxgFIAEoAhIfChdraWxsZWRfdmFsdWVfc3RydWN0",
            "dXJlcxgGIAEoAhIaChJjb2xsZWN0ZWRfbWluZXJhbHMYByABKAISGQoRY29s",
            "bGVjdGVkX3Zlc3BlbmUYCCABKAISIAoYY29sbGVjdGlvbl9yYXRlX21pbmVy",
            "YWxzGAkgASgCEh8KF2NvbGxlY3Rpb25fcmF0ZV92ZXNwZW5lGAogASgCEhYK",
            "DnNwZW50X21pbmVyYWxzGAsgASgCEhUKDXNwZW50X3Zlc3BlbmUYDCABKAIS",
            "NwoJZm9vZF91c2VkGA0gASgLMiQuU0MyQVBJUHJvdG9jb2wuQ2F0ZWdvcnlT",
            "Y29yZURldGFpbHMSPQoPa2lsbGVkX21pbmVyYWxzGA4gASgLMiQuU0MyQVBJ",
            "UHJvdG9jb2wuQ2F0ZWdvcnlTY29yZURldGFpbHMSPAoOa2lsbGVkX3Zlc3Bl",
            "bmUYDyABKAsyJC5TQzJBUElQcm90b2NvbC5DYXRlZ29yeVNjb3JlRGV0YWls",
            "cxI7Cg1sb3N0X21pbmVyYWxzGBAgASgLMiQuU0MyQVBJUHJvdG9jb2wuQ2F0",
            "ZWdvcnlTY29yZURldGFpbHMSOgoMbG9zdF92ZXNwZW5lGBEgASgLMiQuU0My",
            "QVBJUHJvdG9jb2wuQ2F0ZWdvcnlTY29yZURldGFpbHMSRAoWZnJpZW5kbHlf",
            "ZmlyZV9taW5lcmFscxgSIAEoCzIkLlNDMkFQSVByb3RvY29sLkNhdGVnb3J5",
            "U2NvcmVEZXRhaWxzEkMKFWZyaWVuZGx5X2ZpcmVfdmVzcGVuZRgTIAEoCzIk",
            "LlNDMkFQSVByb3RvY29sLkNhdGVnb3J5U2NvcmVEZXRhaWxzEjsKDXVzZWRf",
            "bWluZXJhbHMYFCABKAsyJC5TQzJBUElQcm90b2NvbC5DYXRlZ29yeVNjb3Jl",
            "RGV0YWlscxI6Cgx1c2VkX3Zlc3BlbmUYFSABKAsyJC5TQzJBUElQcm90b2Nv",
            "bC5DYXRlZ29yeVNjb3JlRGV0YWlscxJBChN0b3RhbF91c2VkX21pbmVyYWxz",
            "GBYgASgLMiQuU0MyQVBJUHJvdG9jb2wuQ2F0ZWdvcnlTY29yZURldGFpbHMS",
            "QAoSdG90YWxfdXNlZF92ZXNwZW5lGBcgASgLMiQuU0MyQVBJUHJvdG9jb2wu",
            "Q2F0ZWdvcnlTY29yZURldGFpbHMSPQoSdG90YWxfZGFtYWdlX2RlYWx0GBgg",
            "ASgLMiEuU0MyQVBJUHJvdG9jb2wuVml0YWxTY29yZURldGFpbHMSPQoSdG90",
            "YWxfZGFtYWdlX3Rha2VuGBkgASgLMiEuU0MyQVBJUHJvdG9jb2wuVml0YWxT",
            "Y29yZURldGFpbHMSNwoMdG90YWxfaGVhbGVkGBogASgLMiEuU0MyQVBJUHJv",
            "dG9jb2wuVml0YWxTY29yZURldGFpbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.Score), global::SC2APIProtocol.Score.Parser, new[]{ "ScoreType", "Score_", "ScoreDetails" }, null, new[]{ typeof(global::SC2APIProtocol.Score.Types.ScoreType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.CategoryScoreDetails), global::SC2APIProtocol.CategoryScoreDetails.Parser, new[]{ "None", "Army", "Economy", "Technology", "Upgrade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.VitalScoreDetails), global::SC2APIProtocol.VitalScoreDetails.Parser, new[]{ "Life", "Shields", "Energy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SC2APIProtocol.ScoreDetails), global::SC2APIProtocol.ScoreDetails.Parser, new[]{ "IdleProductionTime", "IdleWorkerTime", "TotalValueUnits", "TotalValueStructures", "KilledValueUnits", "KilledValueStructures", "CollectedMinerals", "CollectedVespene", "CollectionRateMinerals", "CollectionRateVespene", "SpentMinerals", "SpentVespene", "FoodUsed", "KilledMinerals", "KilledVespene", "LostMinerals", "LostVespene", "FriendlyFireMinerals", "FriendlyFireVespene", "UsedMinerals", "UsedVespene", "TotalUsedMinerals", "TotalUsedVespene", "TotalDamageDealt", "TotalDamageTaken", "TotalHealed" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Score : pb::IMessage<Score> {
    private static readonly pb::MessageParser<Score> _parser = new pb::MessageParser<Score>(() => new Score());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Score> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.ScoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score(Score other) : this() {
      scoreType_ = other.scoreType_;
      score_ = other.score_;
      ScoreDetails = other.scoreDetails_ != null ? other.ScoreDetails.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score Clone() {
      return new Score(this);
    }

    /// <summary>Field number for the "score_type" field.</summary>
    public const int ScoreTypeFieldNumber = 6;
    private global::SC2APIProtocol.Score.Types.ScoreType scoreType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.Score.Types.ScoreType ScoreType {
      get { return scoreType_; }
      set {
        scoreType_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int Score_FieldNumber = 7;
    private int score_;
    /// <summary>
    /// Note: check score_type to know whether this is a melee score or curriculum score
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score_ {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "score_details" field.</summary>
    public const int ScoreDetailsFieldNumber = 8;
    private global::SC2APIProtocol.ScoreDetails scoreDetails_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.ScoreDetails ScoreDetails {
      get { return scoreDetails_; }
      set {
        scoreDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Score);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Score other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScoreType != other.ScoreType) return false;
      if (Score_ != other.Score_) return false;
      if (!object.Equals(ScoreDetails, other.ScoreDetails)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScoreType != 0) hash ^= ScoreType.GetHashCode();
      if (Score_ != 0) hash ^= Score_.GetHashCode();
      if (scoreDetails_ != null) hash ^= ScoreDetails.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScoreType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ScoreType);
      }
      if (Score_ != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Score_);
      }
      if (scoreDetails_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ScoreDetails);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScoreType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScoreType);
      }
      if (Score_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score_);
      }
      if (scoreDetails_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScoreDetails);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Score other) {
      if (other == null) {
        return;
      }
      if (other.ScoreType != 0) {
        ScoreType = other.ScoreType;
      }
      if (other.Score_ != 0) {
        Score_ = other.Score_;
      }
      if (other.scoreDetails_ != null) {
        if (scoreDetails_ == null) {
          scoreDetails_ = new global::SC2APIProtocol.ScoreDetails();
        }
        ScoreDetails.MergeFrom(other.ScoreDetails);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 48: {
            scoreType_ = (global::SC2APIProtocol.Score.Types.ScoreType) input.ReadEnum();
            break;
          }
          case 56: {
            Score_ = input.ReadInt32();
            break;
          }
          case 66: {
            if (scoreDetails_ == null) {
              scoreDetails_ = new global::SC2APIProtocol.ScoreDetails();
            }
            input.ReadMessage(scoreDetails_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Score message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ScoreType {
        [pbr::OriginalName("Dummy")] Dummy = 0,
        /// <summary>
        /// map generated score (from curriculum maps with special scoring)
        /// </summary>
        [pbr::OriginalName("Curriculum")] Curriculum = 1,
        /// <summary>
        /// summation of in-progress and current units/buildings value + minerals + vespene
        /// </summary>
        [pbr::OriginalName("Melee")] Melee = 2,
      }

    }
    #endregion

  }

  public sealed partial class CategoryScoreDetails : pb::IMessage<CategoryScoreDetails> {
    private static readonly pb::MessageParser<CategoryScoreDetails> _parser = new pb::MessageParser<CategoryScoreDetails>(() => new CategoryScoreDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CategoryScoreDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.ScoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryScoreDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryScoreDetails(CategoryScoreDetails other) : this() {
      none_ = other.none_;
      army_ = other.army_;
      economy_ = other.economy_;
      technology_ = other.technology_;
      upgrade_ = other.upgrade_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CategoryScoreDetails Clone() {
      return new CategoryScoreDetails(this);
    }

    /// <summary>Field number for the "none" field.</summary>
    public const int NoneFieldNumber = 1;
    private float none_;
    /// <summary>
    /// Used when no other category is configured in game data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float None {
      get { return none_; }
      set {
        none_ = value;
      }
    }

    /// <summary>Field number for the "army" field.</summary>
    public const int ArmyFieldNumber = 2;
    private float army_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Army {
      get { return army_; }
      set {
        army_ = value;
      }
    }

    /// <summary>Field number for the "economy" field.</summary>
    public const int EconomyFieldNumber = 3;
    private float economy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Economy {
      get { return economy_; }
      set {
        economy_ = value;
      }
    }

    /// <summary>Field number for the "technology" field.</summary>
    public const int TechnologyFieldNumber = 4;
    private float technology_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Technology {
      get { return technology_; }
      set {
        technology_ = value;
      }
    }

    /// <summary>Field number for the "upgrade" field.</summary>
    public const int UpgradeFieldNumber = 5;
    private float upgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Upgrade {
      get { return upgrade_; }
      set {
        upgrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CategoryScoreDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CategoryScoreDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (None != other.None) return false;
      if (Army != other.Army) return false;
      if (Economy != other.Economy) return false;
      if (Technology != other.Technology) return false;
      if (Upgrade != other.Upgrade) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (None != 0F) hash ^= None.GetHashCode();
      if (Army != 0F) hash ^= Army.GetHashCode();
      if (Economy != 0F) hash ^= Economy.GetHashCode();
      if (Technology != 0F) hash ^= Technology.GetHashCode();
      if (Upgrade != 0F) hash ^= Upgrade.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (None != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(None);
      }
      if (Army != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Army);
      }
      if (Economy != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Economy);
      }
      if (Technology != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Technology);
      }
      if (Upgrade != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Upgrade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (None != 0F) {
        size += 1 + 4;
      }
      if (Army != 0F) {
        size += 1 + 4;
      }
      if (Economy != 0F) {
        size += 1 + 4;
      }
      if (Technology != 0F) {
        size += 1 + 4;
      }
      if (Upgrade != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CategoryScoreDetails other) {
      if (other == null) {
        return;
      }
      if (other.None != 0F) {
        None = other.None;
      }
      if (other.Army != 0F) {
        Army = other.Army;
      }
      if (other.Economy != 0F) {
        Economy = other.Economy;
      }
      if (other.Technology != 0F) {
        Technology = other.Technology;
      }
      if (other.Upgrade != 0F) {
        Upgrade = other.Upgrade;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            None = input.ReadFloat();
            break;
          }
          case 21: {
            Army = input.ReadFloat();
            break;
          }
          case 29: {
            Economy = input.ReadFloat();
            break;
          }
          case 37: {
            Technology = input.ReadFloat();
            break;
          }
          case 45: {
            Upgrade = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VitalScoreDetails : pb::IMessage<VitalScoreDetails> {
    private static readonly pb::MessageParser<VitalScoreDetails> _parser = new pb::MessageParser<VitalScoreDetails>(() => new VitalScoreDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VitalScoreDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.ScoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VitalScoreDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VitalScoreDetails(VitalScoreDetails other) : this() {
      life_ = other.life_;
      shields_ = other.shields_;
      energy_ = other.energy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VitalScoreDetails Clone() {
      return new VitalScoreDetails(this);
    }

    /// <summary>Field number for the "life" field.</summary>
    public const int LifeFieldNumber = 1;
    private float life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    /// <summary>Field number for the "shields" field.</summary>
    public const int ShieldsFieldNumber = 2;
    private float shields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shields {
      get { return shields_; }
      set {
        shields_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 3;
    private float energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VitalScoreDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VitalScoreDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Life != other.Life) return false;
      if (Shields != other.Shields) return false;
      if (Energy != other.Energy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Life != 0F) hash ^= Life.GetHashCode();
      if (Shields != 0F) hash ^= Shields.GetHashCode();
      if (Energy != 0F) hash ^= Energy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Life != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Life);
      }
      if (Shields != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Shields);
      }
      if (Energy != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Energy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Life != 0F) {
        size += 1 + 4;
      }
      if (Shields != 0F) {
        size += 1 + 4;
      }
      if (Energy != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VitalScoreDetails other) {
      if (other == null) {
        return;
      }
      if (other.Life != 0F) {
        Life = other.Life;
      }
      if (other.Shields != 0F) {
        Shields = other.Shields;
      }
      if (other.Energy != 0F) {
        Energy = other.Energy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Life = input.ReadFloat();
            break;
          }
          case 21: {
            Shields = input.ReadFloat();
            break;
          }
          case 29: {
            Energy = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoreDetails : pb::IMessage<ScoreDetails> {
    private static readonly pb::MessageParser<ScoreDetails> _parser = new pb::MessageParser<ScoreDetails>(() => new ScoreDetails());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SC2APIProtocol.ScoreReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreDetails(ScoreDetails other) : this() {
      idleProductionTime_ = other.idleProductionTime_;
      idleWorkerTime_ = other.idleWorkerTime_;
      totalValueUnits_ = other.totalValueUnits_;
      totalValueStructures_ = other.totalValueStructures_;
      killedValueUnits_ = other.killedValueUnits_;
      killedValueStructures_ = other.killedValueStructures_;
      collectedMinerals_ = other.collectedMinerals_;
      collectedVespene_ = other.collectedVespene_;
      collectionRateMinerals_ = other.collectionRateMinerals_;
      collectionRateVespene_ = other.collectionRateVespene_;
      spentMinerals_ = other.spentMinerals_;
      spentVespene_ = other.spentVespene_;
      FoodUsed = other.foodUsed_ != null ? other.FoodUsed.Clone() : null;
      KilledMinerals = other.killedMinerals_ != null ? other.KilledMinerals.Clone() : null;
      KilledVespene = other.killedVespene_ != null ? other.KilledVespene.Clone() : null;
      LostMinerals = other.lostMinerals_ != null ? other.LostMinerals.Clone() : null;
      LostVespene = other.lostVespene_ != null ? other.LostVespene.Clone() : null;
      FriendlyFireMinerals = other.friendlyFireMinerals_ != null ? other.FriendlyFireMinerals.Clone() : null;
      FriendlyFireVespene = other.friendlyFireVespene_ != null ? other.FriendlyFireVespene.Clone() : null;
      UsedMinerals = other.usedMinerals_ != null ? other.UsedMinerals.Clone() : null;
      UsedVespene = other.usedVespene_ != null ? other.UsedVespene.Clone() : null;
      TotalUsedMinerals = other.totalUsedMinerals_ != null ? other.TotalUsedMinerals.Clone() : null;
      TotalUsedVespene = other.totalUsedVespene_ != null ? other.TotalUsedVespene.Clone() : null;
      TotalDamageDealt = other.totalDamageDealt_ != null ? other.TotalDamageDealt.Clone() : null;
      TotalDamageTaken = other.totalDamageTaken_ != null ? other.TotalDamageTaken.Clone() : null;
      TotalHealed = other.totalHealed_ != null ? other.TotalHealed.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreDetails Clone() {
      return new ScoreDetails(this);
    }

    /// <summary>Field number for the "idle_production_time" field.</summary>
    public const int IdleProductionTimeFieldNumber = 1;
    private float idleProductionTime_;
    /// <summary>
    /// Sum of time any available structure able to produce a unit is not. The time stacks, as in, three idle barracks will increase idle_production_time three times quicker than just one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IdleProductionTime {
      get { return idleProductionTime_; }
      set {
        idleProductionTime_ = value;
      }
    }

    /// <summary>Field number for the "idle_worker_time" field.</summary>
    public const int IdleWorkerTimeFieldNumber = 2;
    private float idleWorkerTime_;
    /// <summary>
    /// Sum of time any worker is not mining. Note a worker building is not idle and three idle workers will increase this value three times quicker than just one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IdleWorkerTime {
      get { return idleWorkerTime_; }
      set {
        idleWorkerTime_ = value;
      }
    }

    /// <summary>Field number for the "total_value_units" field.</summary>
    public const int TotalValueUnitsFieldNumber = 3;
    private float totalValueUnits_;
    /// <summary>
    /// Sum of minerals and vespene spent on completed units.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TotalValueUnits {
      get { return totalValueUnits_; }
      set {
        totalValueUnits_ = value;
      }
    }

    /// <summary>Field number for the "total_value_structures" field.</summary>
    public const int TotalValueStructuresFieldNumber = 4;
    private float totalValueStructures_;
    /// <summary>
    /// Sum of minerals and vespene spent on completed structures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TotalValueStructures {
      get { return totalValueStructures_; }
      set {
        totalValueStructures_ = value;
      }
    }

    /// <summary>Field number for the "killed_value_units" field.</summary>
    public const int KilledValueUnitsFieldNumber = 5;
    private float killedValueUnits_;
    /// <summary>
    /// Sum of minerals and vespene of units, belonging to the opponent, that the player has destroyed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KilledValueUnits {
      get { return killedValueUnits_; }
      set {
        killedValueUnits_ = value;
      }
    }

    /// <summary>Field number for the "killed_value_structures" field.</summary>
    public const int KilledValueStructuresFieldNumber = 6;
    private float killedValueStructures_;
    /// <summary>
    /// Sum of minerals and vespene of structures, belonging to the opponent, that the player has destroyed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KilledValueStructures {
      get { return killedValueStructures_; }
      set {
        killedValueStructures_ = value;
      }
    }

    /// <summary>Field number for the "collected_minerals" field.</summary>
    public const int CollectedMineralsFieldNumber = 7;
    private float collectedMinerals_;
    /// <summary>
    /// Sum of minerals collected by the player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollectedMinerals {
      get { return collectedMinerals_; }
      set {
        collectedMinerals_ = value;
      }
    }

    /// <summary>Field number for the "collected_vespene" field.</summary>
    public const int CollectedVespeneFieldNumber = 8;
    private float collectedVespene_;
    /// <summary>
    /// Sum of vespene collected by the player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollectedVespene {
      get { return collectedVespene_; }
      set {
        collectedVespene_ = value;
      }
    }

    /// <summary>Field number for the "collection_rate_minerals" field.</summary>
    public const int CollectionRateMineralsFieldNumber = 9;
    private float collectionRateMinerals_;
    /// <summary>
    /// Estimated income of minerals over the next minute based on the players current income. The unit is minerals per minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollectionRateMinerals {
      get { return collectionRateMinerals_; }
      set {
        collectionRateMinerals_ = value;
      }
    }

    /// <summary>Field number for the "collection_rate_vespene" field.</summary>
    public const int CollectionRateVespeneFieldNumber = 10;
    private float collectionRateVespene_;
    /// <summary>
    /// Estimated income of vespene over the next minute based on the players current income. The unit is vespene per minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollectionRateVespene {
      get { return collectionRateVespene_; }
      set {
        collectionRateVespene_ = value;
      }
    }

    /// <summary>Field number for the "spent_minerals" field.</summary>
    public const int SpentMineralsFieldNumber = 11;
    private float spentMinerals_;
    /// <summary>
    /// Sum of spent minerals at the moment it is spent. For example, this number is incremented by 50 the moment an scv is queued in a command center.  It is decremented by 50 if that unit is canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpentMinerals {
      get { return spentMinerals_; }
      set {
        spentMinerals_ = value;
      }
    }

    /// <summary>Field number for the "spent_vespene" field.</summary>
    public const int SpentVespeneFieldNumber = 12;
    private float spentVespene_;
    /// <summary>
    /// Sum of spent vespene at the moment it is spent. For example, this number is incremented by 50 when a reaper is queued but decremented by 50 if it is canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpentVespene {
      get { return spentVespene_; }
      set {
        spentVespene_ = value;
      }
    }

    /// <summary>Field number for the "food_used" field.</summary>
    public const int FoodUsedFieldNumber = 13;
    private global::SC2APIProtocol.CategoryScoreDetails foodUsed_;
    /// <summary>
    /// Sum of food, or supply, utilized in the categories above.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails FoodUsed {
      get { return foodUsed_; }
      set {
        foodUsed_ = value;
      }
    }

    /// <summary>Field number for the "killed_minerals" field.</summary>
    public const int KilledMineralsFieldNumber = 14;
    private global::SC2APIProtocol.CategoryScoreDetails killedMinerals_;
    /// <summary>
    /// Sum of enemies catagories destroyed in minerals.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails KilledMinerals {
      get { return killedMinerals_; }
      set {
        killedMinerals_ = value;
      }
    }

    /// <summary>Field number for the "killed_vespene" field.</summary>
    public const int KilledVespeneFieldNumber = 15;
    private global::SC2APIProtocol.CategoryScoreDetails killedVespene_;
    /// <summary>
    /// Sum of enemies catagories destroyed in vespene.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails KilledVespene {
      get { return killedVespene_; }
      set {
        killedVespene_ = value;
      }
    }

    /// <summary>Field number for the "lost_minerals" field.</summary>
    public const int LostMineralsFieldNumber = 16;
    private global::SC2APIProtocol.CategoryScoreDetails lostMinerals_;
    /// <summary>
    ///  Sum of lost minerals for the player in each category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails LostMinerals {
      get { return lostMinerals_; }
      set {
        lostMinerals_ = value;
      }
    }

    /// <summary>Field number for the "lost_vespene" field.</summary>
    public const int LostVespeneFieldNumber = 17;
    private global::SC2APIProtocol.CategoryScoreDetails lostVespene_;
    /// <summary>
    /// Sum of lost vespene for the player in each category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails LostVespene {
      get { return lostVespene_; }
      set {
        lostVespene_ = value;
      }
    }

    /// <summary>Field number for the "friendly_fire_minerals" field.</summary>
    public const int FriendlyFireMineralsFieldNumber = 18;
    private global::SC2APIProtocol.CategoryScoreDetails friendlyFireMinerals_;
    /// <summary>
    /// Sum of the lost minerals via destroying the players own units/buildings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails FriendlyFireMinerals {
      get { return friendlyFireMinerals_; }
      set {
        friendlyFireMinerals_ = value;
      }
    }

    /// <summary>Field number for the "friendly_fire_vespene" field.</summary>
    public const int FriendlyFireVespeneFieldNumber = 19;
    private global::SC2APIProtocol.CategoryScoreDetails friendlyFireVespene_;
    /// <summary>
    /// Sum of the lost vespene via destroying the players own units/buildings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails FriendlyFireVespene {
      get { return friendlyFireVespene_; }
      set {
        friendlyFireVespene_ = value;
      }
    }

    /// <summary>Field number for the "used_minerals" field.</summary>
    public const int UsedMineralsFieldNumber = 20;
    private global::SC2APIProtocol.CategoryScoreDetails usedMinerals_;
    /// <summary>
    /// Sum of used minerals for the player in each category for each existing unit or upgrade. Therefore if a unit died worth 50 mierals this number will be decremented by 50.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails UsedMinerals {
      get { return usedMinerals_; }
      set {
        usedMinerals_ = value;
      }
    }

    /// <summary>Field number for the "used_vespene" field.</summary>
    public const int UsedVespeneFieldNumber = 21;
    private global::SC2APIProtocol.CategoryScoreDetails usedVespene_;
    /// <summary>
    /// Sum of used vespene for the player in each category. Therefore if a unit died worth 50 vespene this number will be decremented by 50.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails UsedVespene {
      get { return usedVespene_; }
      set {
        usedVespene_ = value;
      }
    }

    /// <summary>Field number for the "total_used_minerals" field.</summary>
    public const int TotalUsedMineralsFieldNumber = 22;
    private global::SC2APIProtocol.CategoryScoreDetails totalUsedMinerals_;
    /// <summary>
    /// Sum of used minerals throughout the entire game for each category. Unliked used_minerals, this value is never decremented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails TotalUsedMinerals {
      get { return totalUsedMinerals_; }
      set {
        totalUsedMinerals_ = value;
      }
    }

    /// <summary>Field number for the "total_used_vespene" field.</summary>
    public const int TotalUsedVespeneFieldNumber = 23;
    private global::SC2APIProtocol.CategoryScoreDetails totalUsedVespene_;
    /// <summary>
    /// Sum of used vespene throughout the entire game for each category. Unliked used_vespene, this value is never decremented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.CategoryScoreDetails TotalUsedVespene {
      get { return totalUsedVespene_; }
      set {
        totalUsedVespene_ = value;
      }
    }

    /// <summary>Field number for the "total_damage_dealt" field.</summary>
    public const int TotalDamageDealtFieldNumber = 24;
    private global::SC2APIProtocol.VitalScoreDetails totalDamageDealt_;
    /// <summary>
    /// Sum of damage dealt to the player's opponent for each category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.VitalScoreDetails TotalDamageDealt {
      get { return totalDamageDealt_; }
      set {
        totalDamageDealt_ = value;
      }
    }

    /// <summary>Field number for the "total_damage_taken" field.</summary>
    public const int TotalDamageTakenFieldNumber = 25;
    private global::SC2APIProtocol.VitalScoreDetails totalDamageTaken_;
    /// <summary>
    /// Sum of damage taken by the player for each category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.VitalScoreDetails TotalDamageTaken {
      get { return totalDamageTaken_; }
      set {
        totalDamageTaken_ = value;
      }
    }

    /// <summary>Field number for the "total_healed" field.</summary>
    public const int TotalHealedFieldNumber = 26;
    private global::SC2APIProtocol.VitalScoreDetails totalHealed_;
    /// <summary>
    /// Sum of health healed by the player. Note that technology can be healed (by queens) or repaired (by scvs).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SC2APIProtocol.VitalScoreDetails TotalHealed {
      get { return totalHealed_; }
      set {
        totalHealed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdleProductionTime != other.IdleProductionTime) return false;
      if (IdleWorkerTime != other.IdleWorkerTime) return false;
      if (TotalValueUnits != other.TotalValueUnits) return false;
      if (TotalValueStructures != other.TotalValueStructures) return false;
      if (KilledValueUnits != other.KilledValueUnits) return false;
      if (KilledValueStructures != other.KilledValueStructures) return false;
      if (CollectedMinerals != other.CollectedMinerals) return false;
      if (CollectedVespene != other.CollectedVespene) return false;
      if (CollectionRateMinerals != other.CollectionRateMinerals) return false;
      if (CollectionRateVespene != other.CollectionRateVespene) return false;
      if (SpentMinerals != other.SpentMinerals) return false;
      if (SpentVespene != other.SpentVespene) return false;
      if (!object.Equals(FoodUsed, other.FoodUsed)) return false;
      if (!object.Equals(KilledMinerals, other.KilledMinerals)) return false;
      if (!object.Equals(KilledVespene, other.KilledVespene)) return false;
      if (!object.Equals(LostMinerals, other.LostMinerals)) return false;
      if (!object.Equals(LostVespene, other.LostVespene)) return false;
      if (!object.Equals(FriendlyFireMinerals, other.FriendlyFireMinerals)) return false;
      if (!object.Equals(FriendlyFireVespene, other.FriendlyFireVespene)) return false;
      if (!object.Equals(UsedMinerals, other.UsedMinerals)) return false;
      if (!object.Equals(UsedVespene, other.UsedVespene)) return false;
      if (!object.Equals(TotalUsedMinerals, other.TotalUsedMinerals)) return false;
      if (!object.Equals(TotalUsedVespene, other.TotalUsedVespene)) return false;
      if (!object.Equals(TotalDamageDealt, other.TotalDamageDealt)) return false;
      if (!object.Equals(TotalDamageTaken, other.TotalDamageTaken)) return false;
      if (!object.Equals(TotalHealed, other.TotalHealed)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdleProductionTime != 0F) hash ^= IdleProductionTime.GetHashCode();
      if (IdleWorkerTime != 0F) hash ^= IdleWorkerTime.GetHashCode();
      if (TotalValueUnits != 0F) hash ^= TotalValueUnits.GetHashCode();
      if (TotalValueStructures != 0F) hash ^= TotalValueStructures.GetHashCode();
      if (KilledValueUnits != 0F) hash ^= KilledValueUnits.GetHashCode();
      if (KilledValueStructures != 0F) hash ^= KilledValueStructures.GetHashCode();
      if (CollectedMinerals != 0F) hash ^= CollectedMinerals.GetHashCode();
      if (CollectedVespene != 0F) hash ^= CollectedVespene.GetHashCode();
      if (CollectionRateMinerals != 0F) hash ^= CollectionRateMinerals.GetHashCode();
      if (CollectionRateVespene != 0F) hash ^= CollectionRateVespene.GetHashCode();
      if (SpentMinerals != 0F) hash ^= SpentMinerals.GetHashCode();
      if (SpentVespene != 0F) hash ^= SpentVespene.GetHashCode();
      if (foodUsed_ != null) hash ^= FoodUsed.GetHashCode();
      if (killedMinerals_ != null) hash ^= KilledMinerals.GetHashCode();
      if (killedVespene_ != null) hash ^= KilledVespene.GetHashCode();
      if (lostMinerals_ != null) hash ^= LostMinerals.GetHashCode();
      if (lostVespene_ != null) hash ^= LostVespene.GetHashCode();
      if (friendlyFireMinerals_ != null) hash ^= FriendlyFireMinerals.GetHashCode();
      if (friendlyFireVespene_ != null) hash ^= FriendlyFireVespene.GetHashCode();
      if (usedMinerals_ != null) hash ^= UsedMinerals.GetHashCode();
      if (usedVespene_ != null) hash ^= UsedVespene.GetHashCode();
      if (totalUsedMinerals_ != null) hash ^= TotalUsedMinerals.GetHashCode();
      if (totalUsedVespene_ != null) hash ^= TotalUsedVespene.GetHashCode();
      if (totalDamageDealt_ != null) hash ^= TotalDamageDealt.GetHashCode();
      if (totalDamageTaken_ != null) hash ^= TotalDamageTaken.GetHashCode();
      if (totalHealed_ != null) hash ^= TotalHealed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdleProductionTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(IdleProductionTime);
      }
      if (IdleWorkerTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(IdleWorkerTime);
      }
      if (TotalValueUnits != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TotalValueUnits);
      }
      if (TotalValueStructures != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TotalValueStructures);
      }
      if (KilledValueUnits != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(KilledValueUnits);
      }
      if (KilledValueStructures != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(KilledValueStructures);
      }
      if (CollectedMinerals != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CollectedMinerals);
      }
      if (CollectedVespene != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CollectedVespene);
      }
      if (CollectionRateMinerals != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CollectionRateMinerals);
      }
      if (CollectionRateVespene != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CollectionRateVespene);
      }
      if (SpentMinerals != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(SpentMinerals);
      }
      if (SpentVespene != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(SpentVespene);
      }
      if (foodUsed_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(FoodUsed);
      }
      if (killedMinerals_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(KilledMinerals);
      }
      if (killedVespene_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(KilledVespene);
      }
      if (lostMinerals_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LostMinerals);
      }
      if (lostVespene_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(LostVespene);
      }
      if (friendlyFireMinerals_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(FriendlyFireMinerals);
      }
      if (friendlyFireVespene_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(FriendlyFireVespene);
      }
      if (usedMinerals_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UsedMinerals);
      }
      if (usedVespene_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(UsedVespene);
      }
      if (totalUsedMinerals_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(TotalUsedMinerals);
      }
      if (totalUsedVespene_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(TotalUsedVespene);
      }
      if (totalDamageDealt_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(TotalDamageDealt);
      }
      if (totalDamageTaken_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(TotalDamageTaken);
      }
      if (totalHealed_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(TotalHealed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdleProductionTime != 0F) {
        size += 1 + 4;
      }
      if (IdleWorkerTime != 0F) {
        size += 1 + 4;
      }
      if (TotalValueUnits != 0F) {
        size += 1 + 4;
      }
      if (TotalValueStructures != 0F) {
        size += 1 + 4;
      }
      if (KilledValueUnits != 0F) {
        size += 1 + 4;
      }
      if (KilledValueStructures != 0F) {
        size += 1 + 4;
      }
      if (CollectedMinerals != 0F) {
        size += 1 + 4;
      }
      if (CollectedVespene != 0F) {
        size += 1 + 4;
      }
      if (CollectionRateMinerals != 0F) {
        size += 1 + 4;
      }
      if (CollectionRateVespene != 0F) {
        size += 1 + 4;
      }
      if (SpentMinerals != 0F) {
        size += 1 + 4;
      }
      if (SpentVespene != 0F) {
        size += 1 + 4;
      }
      if (foodUsed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FoodUsed);
      }
      if (killedMinerals_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KilledMinerals);
      }
      if (killedVespene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KilledVespene);
      }
      if (lostMinerals_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LostMinerals);
      }
      if (lostVespene_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LostVespene);
      }
      if (friendlyFireMinerals_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FriendlyFireMinerals);
      }
      if (friendlyFireVespene_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FriendlyFireVespene);
      }
      if (usedMinerals_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UsedMinerals);
      }
      if (usedVespene_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UsedVespene);
      }
      if (totalUsedMinerals_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TotalUsedMinerals);
      }
      if (totalUsedVespene_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TotalUsedVespene);
      }
      if (totalDamageDealt_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TotalDamageDealt);
      }
      if (totalDamageTaken_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TotalDamageTaken);
      }
      if (totalHealed_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TotalHealed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreDetails other) {
      if (other == null) {
        return;
      }
      if (other.IdleProductionTime != 0F) {
        IdleProductionTime = other.IdleProductionTime;
      }
      if (other.IdleWorkerTime != 0F) {
        IdleWorkerTime = other.IdleWorkerTime;
      }
      if (other.TotalValueUnits != 0F) {
        TotalValueUnits = other.TotalValueUnits;
      }
      if (other.TotalValueStructures != 0F) {
        TotalValueStructures = other.TotalValueStructures;
      }
      if (other.KilledValueUnits != 0F) {
        KilledValueUnits = other.KilledValueUnits;
      }
      if (other.KilledValueStructures != 0F) {
        KilledValueStructures = other.KilledValueStructures;
      }
      if (other.CollectedMinerals != 0F) {
        CollectedMinerals = other.CollectedMinerals;
      }
      if (other.CollectedVespene != 0F) {
        CollectedVespene = other.CollectedVespene;
      }
      if (other.CollectionRateMinerals != 0F) {
        CollectionRateMinerals = other.CollectionRateMinerals;
      }
      if (other.CollectionRateVespene != 0F) {
        CollectionRateVespene = other.CollectionRateVespene;
      }
      if (other.SpentMinerals != 0F) {
        SpentMinerals = other.SpentMinerals;
      }
      if (other.SpentVespene != 0F) {
        SpentVespene = other.SpentVespene;
      }
      if (other.foodUsed_ != null) {
        if (foodUsed_ == null) {
          foodUsed_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        FoodUsed.MergeFrom(other.FoodUsed);
      }
      if (other.killedMinerals_ != null) {
        if (killedMinerals_ == null) {
          killedMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        KilledMinerals.MergeFrom(other.KilledMinerals);
      }
      if (other.killedVespene_ != null) {
        if (killedVespene_ == null) {
          killedVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        KilledVespene.MergeFrom(other.KilledVespene);
      }
      if (other.lostMinerals_ != null) {
        if (lostMinerals_ == null) {
          lostMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        LostMinerals.MergeFrom(other.LostMinerals);
      }
      if (other.lostVespene_ != null) {
        if (lostVespene_ == null) {
          lostVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        LostVespene.MergeFrom(other.LostVespene);
      }
      if (other.friendlyFireMinerals_ != null) {
        if (friendlyFireMinerals_ == null) {
          friendlyFireMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        FriendlyFireMinerals.MergeFrom(other.FriendlyFireMinerals);
      }
      if (other.friendlyFireVespene_ != null) {
        if (friendlyFireVespene_ == null) {
          friendlyFireVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        FriendlyFireVespene.MergeFrom(other.FriendlyFireVespene);
      }
      if (other.usedMinerals_ != null) {
        if (usedMinerals_ == null) {
          usedMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        UsedMinerals.MergeFrom(other.UsedMinerals);
      }
      if (other.usedVespene_ != null) {
        if (usedVespene_ == null) {
          usedVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        UsedVespene.MergeFrom(other.UsedVespene);
      }
      if (other.totalUsedMinerals_ != null) {
        if (totalUsedMinerals_ == null) {
          totalUsedMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        TotalUsedMinerals.MergeFrom(other.TotalUsedMinerals);
      }
      if (other.totalUsedVespene_ != null) {
        if (totalUsedVespene_ == null) {
          totalUsedVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
        }
        TotalUsedVespene.MergeFrom(other.TotalUsedVespene);
      }
      if (other.totalDamageDealt_ != null) {
        if (totalDamageDealt_ == null) {
          totalDamageDealt_ = new global::SC2APIProtocol.VitalScoreDetails();
        }
        TotalDamageDealt.MergeFrom(other.TotalDamageDealt);
      }
      if (other.totalDamageTaken_ != null) {
        if (totalDamageTaken_ == null) {
          totalDamageTaken_ = new global::SC2APIProtocol.VitalScoreDetails();
        }
        TotalDamageTaken.MergeFrom(other.TotalDamageTaken);
      }
      if (other.totalHealed_ != null) {
        if (totalHealed_ == null) {
          totalHealed_ = new global::SC2APIProtocol.VitalScoreDetails();
        }
        TotalHealed.MergeFrom(other.TotalHealed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            IdleProductionTime = input.ReadFloat();
            break;
          }
          case 21: {
            IdleWorkerTime = input.ReadFloat();
            break;
          }
          case 29: {
            TotalValueUnits = input.ReadFloat();
            break;
          }
          case 37: {
            TotalValueStructures = input.ReadFloat();
            break;
          }
          case 45: {
            KilledValueUnits = input.ReadFloat();
            break;
          }
          case 53: {
            KilledValueStructures = input.ReadFloat();
            break;
          }
          case 61: {
            CollectedMinerals = input.ReadFloat();
            break;
          }
          case 69: {
            CollectedVespene = input.ReadFloat();
            break;
          }
          case 77: {
            CollectionRateMinerals = input.ReadFloat();
            break;
          }
          case 85: {
            CollectionRateVespene = input.ReadFloat();
            break;
          }
          case 93: {
            SpentMinerals = input.ReadFloat();
            break;
          }
          case 101: {
            SpentVespene = input.ReadFloat();
            break;
          }
          case 106: {
            if (foodUsed_ == null) {
              foodUsed_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(foodUsed_);
            break;
          }
          case 114: {
            if (killedMinerals_ == null) {
              killedMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(killedMinerals_);
            break;
          }
          case 122: {
            if (killedVespene_ == null) {
              killedVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(killedVespene_);
            break;
          }
          case 130: {
            if (lostMinerals_ == null) {
              lostMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(lostMinerals_);
            break;
          }
          case 138: {
            if (lostVespene_ == null) {
              lostVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(lostVespene_);
            break;
          }
          case 146: {
            if (friendlyFireMinerals_ == null) {
              friendlyFireMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(friendlyFireMinerals_);
            break;
          }
          case 154: {
            if (friendlyFireVespene_ == null) {
              friendlyFireVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(friendlyFireVespene_);
            break;
          }
          case 162: {
            if (usedMinerals_ == null) {
              usedMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(usedMinerals_);
            break;
          }
          case 170: {
            if (usedVespene_ == null) {
              usedVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(usedVespene_);
            break;
          }
          case 178: {
            if (totalUsedMinerals_ == null) {
              totalUsedMinerals_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(totalUsedMinerals_);
            break;
          }
          case 186: {
            if (totalUsedVespene_ == null) {
              totalUsedVespene_ = new global::SC2APIProtocol.CategoryScoreDetails();
            }
            input.ReadMessage(totalUsedVespene_);
            break;
          }
          case 194: {
            if (totalDamageDealt_ == null) {
              totalDamageDealt_ = new global::SC2APIProtocol.VitalScoreDetails();
            }
            input.ReadMessage(totalDamageDealt_);
            break;
          }
          case 202: {
            if (totalDamageTaken_ == null) {
              totalDamageTaken_ = new global::SC2APIProtocol.VitalScoreDetails();
            }
            input.ReadMessage(totalDamageTaken_);
            break;
          }
          case 210: {
            if (totalHealed_ == null) {
              totalHealed_ = new global::SC2APIProtocol.VitalScoreDetails();
            }
            input.ReadMessage(totalHealed_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
